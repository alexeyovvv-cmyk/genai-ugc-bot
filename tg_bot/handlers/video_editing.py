"""
Handlers for video editing functionality.

This module handles:
- Video editing (subtitles, compositing)
- Finishing generation flow without editing
- Re-editing support (multiple iterations)
"""
import logging
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from tg_bot.states import UGCCreation
from tg_bot.keyboards import main_menu, video_editing_menu
from tg_bot.utils.user_state import (
    get_original_video,
    get_last_generated_video,
    set_last_generated_video,
    clear_all_video_data,
    get_video_format,
    get_background_video_path,
    get_character_text
)
from tg_bot.services.video_editing_service import (
    add_subtitles_to_video,
    composite_head_with_background,
    VideoEditingError
)
from tg_bot.dispatcher import dp
from tg_bot.utils.logger import setup_logger

logger = setup_logger(__name__)


@dp.callback_query(F.data == "start_video_editing", StateFilter(UGCCreation.waiting_editing_decision))
async def start_video_editing(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–Ω—Ç–∞–∂'"""
    await c.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º original_video –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –º–æ–Ω—Ç–∞–∂–µ–π)
        video_data = get_original_video(c.from_user.id)
        if not video_data or not video_data.get('r2_key'):
            await c.message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞")
            await state.clear()
            await c.message.answer("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ:", reply_markup=main_menu())
            return
        
        video_r2_key = video_data['r2_key']
        video_format = get_video_format(c.from_user.id)
        text = get_character_text(c.from_user.id) or ""
        
        logger.info(f"Starting video editing for user {c.from_user.id}, format={video_format}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await c.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –º–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ...")
        
        try:
            if video_format == "talking_head":
                # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –î–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –∫ –≥–æ–≤–æ—Ä—è—â–µ–π –≥–æ–ª–æ–≤–µ
                logger.info(f"Adding subtitles to talking head video for user {c.from_user.id}")
                
                await status_msg.edit_text("‚è≥ –ù–∞–∫–ª–∞–¥—ã–≤–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã...")
                
                result = await add_subtitles_to_video(
                    video_r2_key=video_r2_key,
                    text=text,
                    user_id=c.from_user.id
                )
                
                await status_msg.edit_text("‚è≥ –†–µ–Ω–¥–µ—Ä—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)...")
                
            elif video_format == "character_with_background":
                # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ö–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥ –≥–æ–ª–æ–≤—ã —Å —Ñ–æ–Ω–æ–º
                background_r2_key = get_background_video_path(c.from_user.id)
                if not background_r2_key:
                    await status_msg.delete()
                    await c.message.answer(
                        "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ.\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ:",
                        reply_markup=video_editing_menu()
                    )
                    return
                
                logger.info(f"Compositing head with background for user {c.from_user.id}")
                
                await status_msg.edit_text("‚è≥ –ú–æ–Ω—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ —Å —Ñ–æ–Ω–æ–º...")
                
                result = await composite_head_with_background(
                    head_r2_key=video_r2_key,
                    background_r2_key=background_r2_key,
                    text=text,
                    user_id=c.from_user.id
                )
                
                await status_msg.edit_text("‚è≥ –†–µ–Ω–¥–µ—Ä—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)...")
                
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –º–æ–Ω—Ç–∞–∂
                logger.warning(f"Unknown video format '{video_format}' for user {c.from_user.id}, using talking_head")
                
                await status_msg.edit_text("‚è≥ –ù–∞–∫–ª–∞–¥—ã–≤–∞—é —Å—É–±—Ç–∏—Ç—Ä—ã...")
                
                result = await add_subtitles_to_video(
                    video_r2_key=video_r2_key,
                    text=text,
                    user_id=c.from_user.id
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω—Ç–∞–∂–∞
            set_last_generated_video(
                c.from_user.id,
                result.get('r2_key'),
                result.get('url')
            )
            logger.info(f"Saved edited video for user {c.from_user.id}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
            await c.message.answer("‚úÖ –ú–æ–Ω—Ç–∞–∂ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
            
            if result.get('url'):
                await c.message.answer_video(
                    result['url'],
                    caption="üé¨ –¢–≤–æ–µ –≤–∏–¥–µ–æ —Å –º–æ–Ω—Ç–∞–∂–æ–º –≥–æ—Ç–æ–≤–æ!"
                )
            else:
                await c.message.answer("‚úÖ –í–∏–¥–µ–æ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            
            logger.info(f"Video editing completed for user {c.from_user.id}")
            
            # ‚ú® –ù–ï –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –º–æ–Ω—Ç–∞–∂–∞
            await c.message.answer(
                "üé¨ –•–æ—á–µ—à—å —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?\n\n"
                "üí° –¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –º–æ–Ω—Ç–∞–∂–∞!",
                reply_markup=video_editing_menu()
            )
            
        except VideoEditingError as e:
            logger.error(f"Video editing error for user {c.from_user.id}: {e}")
            await status_msg.delete()
            
            # ‚ú® –ù–ï –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï - –¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            await c.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∞–∂–µ –≤–∏–¥–µ–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ:",
                reply_markup=video_editing_menu()
            )
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_editing_decision
            
        except Exception as e:
            logger.error(f"Unexpected error in video editing for user {c.from_user.id}: {e}", exc_info=True)
            await status_msg.delete()
            
            # ‚ú® –ù–ï –û–ß–ò–©–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï - –¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            await c.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ:",
                reply_markup=video_editing_menu()
            )
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_editing_decision
        
    except Exception as e:
        logger.error(f"Error in start_video_editing for user {c.from_user.id}: {e}", exc_info=True)
        await state.clear()
        await c.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ.",
            reply_markup=main_menu()
        )


@dp.callback_query(F.data == "finish_generation", StateFilter(UGCCreation.waiting_editing_decision))
async def finish_generation(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' (–±–µ–∑ –º–æ–Ω—Ç–∞–∂–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∞–∂–∞)"""
    await c.answer()
    
    logger.info(f"User {c.from_user.id} finished generation")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –º–æ–Ω—Ç–∞–∂
    edited_video = get_last_generated_video(c.from_user.id)
    
    if edited_video and edited_video.get('r2_key'):
        # –ë—ã–ª –º–æ–Ω—Ç–∞–∂ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await c.message.edit_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∏–¥–µ–æ —Å –º–æ–Ω—Ç–∞–∂–æ–º –≥–æ—Ç–æ–≤–æ.\n\n"
            "üé¨ –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É UGC —Ä–µ–∫–ª–∞–º—É?"
        )
    else:
        # –ú–æ–Ω—Ç–∞–∂–∞ –Ω–µ –±—ã–ª–æ - –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
        await c.message.edit_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ.\n\n"
            "üé¨ –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É UGC —Ä–µ–∫–ª–∞–º—É?"
        )
    
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ
    clear_all_video_data(c.from_user.id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await c.message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
