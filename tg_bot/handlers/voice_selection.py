"""Voice selection handlers for the Telegram bot.

This module contains handlers for:
- Voice gallery navigation
- Voice selection
- Voice changing
"""

from aiogram import F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaAudio
from aiogram.fsm.context import FSMContext

from tg_bot.states import UGCCreation
from tg_bot.utils.user_state import (
    get_character_gender, get_character_age,
    get_voice_page, set_voice_page,
    get_character_text, get_selected_voice,
    set_selected_voice
)
from tg_bot.utils.voices import list_voice_samples, get_voice_sample
from tg_bot.keyboards import voice_gallery_menu, back_to_main_menu
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)


async def show_voice_gallery(c: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    page = get_voice_page(c.from_user.id)
    
    if not gender or not age:
        await c.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=back_to_main_menu()
        )
        return await c.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    voices, has_next = list_voice_samples(gender, age, page, limit=5)
    
    if not voices:
        await c.message.edit_text(
            f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤</b>\n\n"
            f"–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø–æ–ª: {gender}, –≤–æ–∑—Ä–∞—Å—Ç: {age}) "
            f"–≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            parse_mode="HTML",
            reply_markup=voice_gallery_menu(page, has_next, len(voices))
        )
        return await c.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ-—Å—ç–º–ø–ª—ã –≥–æ–ª–æ—Å–æ–≤ –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º (–¥–æ 5 –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ)
    media = []
    for idx, (name, voice_id, audio_path) in enumerate(voices):
        global_index = page * 5 + idx
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å R2 –∫–ª—é—á–æ–º –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º
        if audio_path.startswith('presets/'):
            # –≠—Ç–æ R2 –∫–ª—é—á, –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å presigned URL
            from tg_bot.services.r2_service import download_file
            import tempfile
            import os
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ R2
            if download_file(audio_path, temp_path):
                media.append(
                    InputMediaAudio(
                        media=FSInputFile(temp_path)
                    )
                )
            else:
                logger.warning(f"Failed to download R2 file: {audio_path}")
                continue
        else:
            # –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            media.append(
                InputMediaAudio(
                    media=FSInputFile(audio_path)
                )
            )
    
    if media:
        await c.message.answer_media_group(media)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for item in media:
            if hasattr(item.media, 'path') and item.media.path.startswith('/tmp'):
                try:
                    os.unlink(item.media.path)
                except:
                    pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await c.message.answer(
        f"üé§ <b>–ì–æ–ª–æ—Å–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ({gender}, {age})</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}. –í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
        parse_mode="HTML",
        reply_markup=voice_gallery_menu(page, has_next, len(voices))
    )
    
    await state.set_state(UGCCreation.waiting_voice_gallery)
    await c.answer()


@dp.callback_query(F.data.startswith("voice_page:"))
async def voice_page_changed(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤"""
    page = int(c.data.split(":", 1)[1])
    set_voice_page(c.from_user.id, page)
    logger.info(f"User {c.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤ {page}")
    
    await show_voice_gallery(c, state)


@dp.callback_query(F.data.startswith("voice_pick:"))
async def voice_picked(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–ª–æ—Å"""
    from tg_bot.utils.credits import ensure_user
    ensure_user(c.from_user.id)
    idx = int(c.data.split(":", 1)[1])
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    
    if not gender or not age:
        await c.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=back_to_main_menu()
        )
        return await c.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    voice_data = get_voice_sample(gender, age, idx)
    
    if not voice_data:
        await c.message.answer("‚ùå –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        return await c.answer()
    
    name, voice_id, sample_path = voice_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
    set_selected_voice(c.from_user.id, voice_id)
    logger.info(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –≥–æ–ª–æ—Å #{idx+1}: {name} ({voice_id})")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞
    await c.message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å #{idx+1}: {name}\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂.\n\n"
        "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å—Ç–∞–≤—å —Ç–æ—á–∫—É –∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–Ω–∞–∫ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî —Ç–∞–∫ —Ä–µ—á—å –∑–≤—É—á–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º, —á—Ç–æ–±—ã –æ–∑–≤—É—á–∫–∞ –∑–∞–Ω—è–ª–∞ –Ω–µ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥!\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 20%!'",
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    
    await state.set_state(UGCCreation.waiting_character_text)
    await c.answer()


@dp.callback_query(F.data == "change_voice")
async def change_voice(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_text = get_character_text(c.from_user.id)
    
    if not character_text:
        await c.message.answer(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=back_to_main_menu()
        )
        await state.clear()
        return await c.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—ã–±—Ä–∞–Ω—ã
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    
    if not gender or not age:
        await c.message.answer(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=back_to_main_menu()
        )
        await state.clear()
        return await c.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
    set_voice_page(c.from_user.id, 0)
    await show_voice_gallery(c, state)
