"""My generations handlers for the Telegram bot.

This module contains handlers for:
- Showing user's generation history
"""

from aiogram import F
from aiogram.types import CallbackQuery

from tg_bot.utils.credits import ensure_user
from tg_bot.utils.user_storage import get_user_generations, get_user_storage_stats
from tg_bot.keyboards import back_to_main_menu
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)


@dp.callback_query(F.data == "my_generations")
async def show_my_generations(c: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = c.from_user.id
        ensure_user(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        generations = get_user_generations(user_id, limit=10)
        
        if not generations:
            await c.message.answer(
                "üìÅ <b>–ú–æ–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é UGC —Ä–µ–∫–ª–∞–º—É!",
                parse_mode="HTML",
                reply_markup=back_to_main_menu()
            )
            return await c.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–∏–¥–µ–æ
        message_text = f"üìÅ <b>–ú–æ–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\n–ù–∞–π–¥–µ–Ω–æ: {len(generations)} –≤–∏–¥–µ–æ\n\n"
        
        for i, gen in enumerate(generations, 1):
            created_at = gen['created_at'].strftime('%d.%m.%Y %H:%M')
            character_info = f"{gen['character_gender']}/{gen['character_age']}" if gen['character_gender'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            message_text += f"üé• <b>–í–∏–¥–µ–æ #{i}</b>\n"
            message_text += f"üìÖ {created_at}\n"
            message_text += f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂: {character_info}\n"
            message_text += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {gen['credits_spent']} –∫—Ä–µ–¥–∏—Ç(–æ–≤)\n"
            
            if gen['text_prompt']:
                message_text += f"üí¨ –¢–µ–∫—Å—Ç: {gen['text_prompt'][:50]}{'...' if len(gen['text_prompt']) > 50 else ''}\n"
            
            if gen['has_video'] and gen['video_url']:
                message_text += f"üîó <a href='{gen['video_url']}'>–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ</a>\n"
            else:
                message_text += "‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            
            message_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_user_storage_stats(user_id)
        message_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        message_text += f"–í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {stats['total_generations']}\n"
        message_text += f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {stats['total_credits_spent']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        message_text += f"\nüí° <b>–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å:</b>\n"
        message_text += f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É '–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ'\n"
        message_text += f"‚Ä¢ –í–∏–¥–µ–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
        message_text += f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å' –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
        message_text += f"‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 24 —á–∞—Å–∞"
        
        await c.message.answer(
            message_text,
            parse_mode="HTML",
            reply_markup=back_to_main_menu()
        )
        
    except Exception as e:
        logger.error(f"[MY_GENERATIONS] Error: {e}")
        await c.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=back_to_main_menu()
        )
    
    await c.answer()
