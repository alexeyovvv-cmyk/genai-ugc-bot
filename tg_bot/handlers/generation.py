"""Generation handlers for the Telegram bot.

This module contains handlers for:
- Audio generation and confirmation
- Video generation
- Text input handling
- Audio redo functionality
"""

import os
import sys
import time
from aiogram import F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext

from tg_bot.states import UGCCreation
from tg_bot.utils.credits import get_credits, spend_credits, add_credits
from tg_bot.utils.constants import COST_UGC_VIDEO
from tg_bot.utils.user_state import (
    get_selected_character, get_character_text, set_character_text,
    get_selected_voice, get_last_audio, set_last_audio,
    get_character_gender, get_character_age,
    get_original_character_path, get_edited_character_path,
    clear_edit_session
)
from tg_bot.utils.files import get_character_image
from tg_bot.utils.audio import check_audio_duration_limit
from tg_bot.services.elevenlabs_service import tts_to_file
from tg_bot.services.falai_service import generate_talking_head_video
from tg_bot.services.r2_service import download_file, delete_file
from tg_bot.keyboards import (
    audio_confirmation_menu, text_change_decision_menu,
    back_to_main_menu, main_menu
)
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)


@dp.callback_query(F.data == "audio_confirmed")
async def audio_confirmed(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞—É–¥–∏–æ, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ"""
    
    def log(msg):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º flush"""
        logger.info(msg)
        sys.stdout.flush()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
    await c.answer()
    
    log(f"[UGC] User {c.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞—É–¥–∏–æ, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
    credits = get_credits(c.from_user.id)
    if credits < COST_UGC_VIDEO:
        log(f"[UGC] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ —É user {c.from_user.id}")
        await c.message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–Ω—É–∂–Ω–æ {COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç).\n\n"
            "–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç
    ok = spend_credits(c.from_user.id, COST_UGC_VIDEO, "ugc_video_creation")
    if not ok:
        log(f"[UGC] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –∫—Ä–µ–¥–∏—Ç —É user {c.from_user.id}")
        await c.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞.\n\n"
            "–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    log(f"[UGC] –ö—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    try:
        await c.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã...\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        log(f"[UGC] –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        log(f"[UGC] –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        character_idx = get_selected_character(c.from_user.id)
        character_text = get_character_text(c.from_user.id)
        audio_path = get_last_audio(c.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        gender = get_character_gender(c.from_user.id)
        age = get_character_age(c.from_user.id)
        
        log(f"[UGC] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: character_idx={character_idx}, gender={gender}, age={age}")
        log(f"[UGC] –¢–µ–∫—Å—Ç: {character_text[:30] if character_text else 'None'}...")
        log(f"[UGC] –ê—É–¥–∏–æ: {audio_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
        if not gender or not age or character_idx is None:
            raise Exception("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å). –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        edited_character_path = get_edited_character_path(c.from_user.id)
        temp_edited_path = None
        
        if edited_character_path:
            # Check if it's R2 key or local path
            if edited_character_path.startswith("users/"):
                # It's R2 key - download to temp for video generation
                temp_edited_path = f"data/temp_edits/temp_{int(time.time())}.jpg"
                
                if download_file(edited_character_path, temp_edited_path):
                    selected_frame = temp_edited_path
                    log(f"[UGC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ R2: {edited_character_path}")
                else:
                    log(f"[UGC] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑ R2, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                    selected_frame = get_character_image(gender, age, character_idx)
            else:
                # Legacy local path support
                if os.path.exists(edited_character_path):
                    selected_frame = edited_character_path
                    log(f"[UGC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: {edited_character_path}")
                else:
                    log(f"[UGC] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                    selected_frame = get_character_image(gender, age, character_idx)
        else:
            # No edited version
            selected_frame = get_character_image(gender, age, character_idx)
            log(f"[UGC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {gender}/{age}, –∏–Ω–¥–µ–∫—Å {character_idx}")
        
        if not selected_frame:
            log(f"[UGC] ‚ùå –ö–∞–¥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            if gender and age:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –ø–æ–ª={gender}, –≤–æ–∑—Ä–∞—Å—Ç={age}, –∏–Ω–¥–µ–∫—Å={character_idx}")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–¥—Ä")
        
        if not audio_path or not os.path.exists(audio_path):
            log(f"[UGC] ‚ùå –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª")
        
        log(f"[UGC] –í—ã–±—Ä–∞–Ω –∫–∞–¥—Ä: {selected_frame}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é fal.ai OmniHuman
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–¥—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –∞—É–¥–∏–æ
        await c.message.answer("üé¨ –°–æ–∑–¥–∞—é UGC —Ä–µ–∫–ª–∞–º—É —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≥—É–±... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã)")
        log(f"[UGC] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é talking head –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ fal.ai...")
        log(f"[UGC] –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–¥—Ä: {selected_frame}")
        log(f"[UGC] –ê—É–¥–∏–æ —Ñ–∞–π–ª: {audio_path}")
        
        try:
            log(f"[UGC] Calling generate_talking_head_video with user_id: {c.from_user.id}")
            video_result = await generate_talking_head_video(
                audio_path=audio_path,
                image_path=selected_frame,
                user_id=c.from_user.id
            )
            
            if not video_result:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")
            
            video_path = video_result['local_path']
            video_url = video_result.get('video_url')
            r2_video_key = video_result.get('r2_video_key')
            # r2_audio_key –≤—Å–µ–≥–¥–∞ None - –∞—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ MP4
            
            log(f"[UGC] –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {video_path}")
            log(f"[UGC] Video URL: {video_url}")
            log(f"[UGC] R2 Video Key: {r2_video_key}")
            if r2_video_key:
                log(f"[UGC] –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ R2: {r2_video_key}")
            else:
                log(f"[UGC] ‚ö†Ô∏è R2 Video Key is None - video not saved to R2")
        except Exception as video_error:
            log(f"[UGC] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {video_error}")
            import traceback
            traceback.print_exc()
            # –ê–≤—Ç–æ-—Ä–µ—Ñ–∞–Ω–¥ –∫—Ä–µ–¥–∏—Ç–∞ –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_ugc_fail")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {str(video_error)}")
        
        if video_path:
            await c.message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
            log(f"[UGC] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º presigned URL –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
            if video_url:
                await c.message.answer_video(
                    video_url, 
                    caption=f"üéâ –¢–≤–æ—è UGC —Ä–µ–∫–ª–∞–º–∞ –≥–æ—Ç–æ–≤–∞!\n\n(-{COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω)"
                )
                log(f"[UGC] ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ R2 URL")
            else:
                await c.message.answer_video(
                    FSInputFile(video_path), 
                    caption=f"üéâ –¢–≤–æ—è UGC —Ä–µ–∫–ª–∞–º–∞ –≥–æ—Ç–æ–≤–∞!\n\n(-{COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω)"
                )
                log(f"[UGC] ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
            try:
                from tg_bot.utils.user_storage import save_user_generation
                log(f"[UGC] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é...")
                log(f"[UGC] User ID: {c.from_user.id}")
                log(f"[UGC] R2 Video Key: {r2_video_key}")
                log(f"[UGC] Character: {get_character_gender(c.from_user.id)}/{get_character_age(c.from_user.id)}")
                log(f"[UGC] Text: {get_character_text(c.from_user.id)}")
                
                generation_id = save_user_generation(
                    user_id=c.from_user.id,
                    generation_type='video',
                    r2_video_key=r2_video_key,
                    r2_audio_key=None,  # –ê—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ MP4, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                    character_gender=get_character_gender(c.from_user.id),
                    character_age=get_character_age(c.from_user.id),
                    text_prompt=get_character_text(c.from_user.id),
                    credits_spent=COST_UGC_VIDEO
                )
                log(f"[UGC] ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å ID: {generation_id}")
            except Exception as save_error:
                log(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é: {save_error}")
                import traceback
                traceback.print_exc()
            
            # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if os.path.exists(video_path):
                    os.remove(video_path)
                    log(f"[UGC] ‚úÖ –í–∏–¥–µ–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {video_path}")
            except Exception as cleanup_error:
                log(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª: {cleanup_error}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            try:
                edited_path = get_edited_character_path(c.from_user.id)
                if edited_path:
                    # Check if it's R2 key or local path
                    if edited_path.startswith("users/"):
                        # It's R2 key - delete from R2
                        if delete_file(edited_path):
                            log(f"[UGC] ‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ R2: {edited_path}")
                        else:
                            log(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ R2: {edited_path}")
                    else:
                        # Legacy local path
                        if os.path.exists(edited_path):
                            os.remove(edited_path)
                            log(f"[UGC] ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {edited_path}")
                    
                    # Also delete temp file if downloaded from R2
                    if temp_edited_path and os.path.exists(temp_edited_path):
                        os.remove(temp_edited_path)
                        log(f"[UGC] ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_edited_path}")
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                clear_edit_session(c.from_user.id)
                log(f"[UGC] ‚úÖ –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω–∞")
            except Exception as cleanup_error:
                log(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {cleanup_error}")
        else:
            # –ê–≤—Ç–æ-—Ä–µ—Ñ–∞–Ω–¥ –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
            add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_ugc_fail")
            raise Exception("–í–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        log(f"[UGC] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ
        await c.message.answer(
            "üé¨ –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É UGC —Ä–µ–∫–ª–∞–º—É?",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        log(f"[UGC] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UGC —Ä–µ–∫–ª–∞–º—ã: {e}")
        import traceback
        traceback.print_exc()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            edited_path = get_edited_character_path(c.from_user.id)
            if edited_path and os.path.exists(edited_path):
                os.remove(edited_path)
                log(f"[UGC] ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ: {edited_path}")
            clear_edit_session(c.from_user.id)
            log(f"[UGC] ‚úÖ –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ")
        except Exception as cleanup_error:
            log(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ: {cleanup_error}")
        
        await c.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:\n\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=main_menu()
        )
        await state.clear()


@dp.callback_query(F.data == "audio_redo")
async def audio_redo(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∞—É–¥–∏–æ"""
    await c.message.answer(
        "üîÑ –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º?",
        reply_markup=text_change_decision_menu()
    )
    await state.set_state(UGCCreation.waiting_text_change_decision)
    await c.answer()


@dp.callback_query(F.data == "change_text_yes")
async def change_text_yes(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"""
    await c.message.answer(
        "‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º, —á—Ç–æ–±—ã –æ–∑–≤—É—á–∫–∞ –∑–∞–Ω—è–ª–∞ –Ω–µ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥!",
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    await state.set_state(UGCCreation.waiting_new_character_text)
    await c.answer()


@dp.callback_query(F.data == "change_text_no")
async def change_text_no(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    character_text = get_character_text(c.from_user.id)
    
    if not character_text:
        await c.message.answer(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return await c.answer()
    
    voice_id = get_selected_voice(c.from_user.id)
    
    if not voice_id:
        await c.message.answer(
            "‚ùå –ì–æ–ª–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return await c.answer()
    
    try:
        await c.message.answer("üé§ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–∑–≤—É—á–∫—É —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º...")
        logger.info(f"[UGC] –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c.from_user.id}, voice_id={voice_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        old_audio_path = get_last_audio(c.from_user.id)
        if old_audio_path and os.path.exists(old_audio_path):
            try:
                os.remove(old_audio_path)
            except:
                pass
        
        audio_path = await tts_to_file(character_text, voice_id)
        
        if not audio_path:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        logger.info(f"[UGC] –ê—É–¥–∏–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {audio_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –∞—É–¥–∏–æ
        set_last_audio(c.from_user.id, audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_valid, duration = check_audio_duration_limit(audio_path, max_seconds=15.0)
        
        logger.info(f"[UGC] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫, –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
        
        if not is_valid:
            await c.message.answer(
                f"‚ùå <b>–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –æ–∑–≤—É—á–∫–∏: <b>{duration:.1f} —Å–µ–∫—É–Ω–¥</b>\n"
                f"–ú–∞–∫—Å–∏–º—É–º: <b>15 —Å–µ–∫—É–Ω–¥</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=back_to_main_menu()
            )
            # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
            except:
                pass
            await state.clear()
            return await c.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
        await c.message.answer_audio(
            FSInputFile(audio_path),
            caption=f"üé§ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–∑–≤—É—á–∫–∏ ({duration:.1f} —Å–µ–∫)"
        )
        
        # –°–Ω–æ–≤–∞ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
        await c.message.answer(
            "‚úÖ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            reply_markup=audio_confirmation_menu()
        )
        
        await state.set_state(UGCCreation.waiting_audio_confirmation)
        
    except Exception as e:
        logger.error(f"[UGC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        import traceback
        traceback.print_exc()
        
        await c.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=main_menu()
        )
        await state.clear()
    
    await c.answer()


@dp.message(F.text, UGCCreation).waiting_character_text
async def character_text_received(m: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    set_character_text(m.from_user.id, m.text)
    logger.info(f"User {m.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {m.text[:50]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
    voice_id = get_selected_voice(m.from_user.id)
    
    if not voice_id:
        await m.answer(
            "‚ùå –ì–æ–ª–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await m.answer("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–∑–≤—É—á–∫—É...")
        logger.info(f"[UGC] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m.from_user.id}, voice_id={voice_id}")
        
        audio_path = await tts_to_file(m.text, voice_id)
        
        if not audio_path:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        logger.info(f"[UGC] –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {audio_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ
        set_last_audio(m.from_user.id, audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_valid, duration = check_audio_duration_limit(audio_path, max_seconds=15.0)
        
        logger.info(f"[UGC] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫, –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
        
        if not is_valid:
            await m.answer(
                f"‚ùå <b>–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –æ–∑–≤—É—á–∫–∏: <b>{duration:.1f} —Å–µ–∫—É–Ω–¥</b>\n"
                f"–ú–∞–∫—Å–∏–º—É–º: <b>15 —Å–µ–∫—É–Ω–¥</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=back_to_main_menu()
            )
            # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
            except:
                pass
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        await m.answer_audio(
            FSInputFile(audio_path),
            caption=f"üé§ –í–æ—Ç –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å ({duration:.1f} —Å–µ–∫)"
        )
        
        # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∞—É–¥–∏–æ
        await m.answer(
            "‚úÖ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            reply_markup=audio_confirmation_menu()
        )
        
        await state.set_state(UGCCreation.waiting_audio_confirmation)
        
    except Exception as e:
        logger.error(f"[UGC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        import traceback
        traceback.print_exc()
        
        await m.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=main_menu()
        )
        await state.clear()


@dp.message(F.text, UGCCreation).waiting_new_character_text
async def new_character_text_received(m: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–µ–ª–∫–∏ –∞—É–¥–∏–æ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    set_character_text(m.from_user.id, m.text)
    logger.info(f"User {m.from_user.id} –≤–≤–µ–ª –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {m.text[:50]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
    voice_id = get_selected_voice(m.from_user.id)
    
    if not voice_id:
        await m.answer(
            "‚ùå –ì–æ–ª–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    try:
        await m.answer("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—É—é –æ–∑–≤—É—á–∫—É...")
        logger.info(f"[UGC] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m.from_user.id}, voice_id={voice_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        old_audio_path = get_last_audio(m.from_user.id)
        if old_audio_path and os.path.exists(old_audio_path):
            try:
                os.remove(old_audio_path)
            except:
                pass
        
        audio_path = await tts_to_file(m.text, voice_id)
        
        if not audio_path:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        logger.info(f"[UGC] –ù–æ–≤–æ–µ –∞—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {audio_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ
        set_last_audio(m.from_user.id, audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_valid, duration = check_audio_duration_limit(audio_path, max_seconds=15.0)
        
        logger.info(f"[UGC] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫, –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
        
        if not is_valid:
            await m.answer(
                f"‚ùå <b>–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –æ–∑–≤—É—á–∫–∏: <b>{duration:.1f} —Å–µ–∫—É–Ω–¥</b>\n"
                f"–ú–∞–∫—Å–∏–º—É–º: <b>15 —Å–µ–∫—É–Ω–¥</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=back_to_main_menu()
            )
            # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
            except:
                pass
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        await m.answer_audio(
            FSInputFile(audio_path),
            caption=f"üé§ –í–æ—Ç –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å ({duration:.1f} —Å–µ–∫)"
        )
        
        # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∞—É–¥–∏–æ
        await m.answer(
            "‚úÖ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            reply_markup=audio_confirmation_menu()
        )
        
        await state.set_state(UGCCreation.waiting_audio_confirmation)
        
    except Exception as e:
        logger.error(f"[UGC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: {e}")
        import traceback
        traceback.print_exc()
        
        await m.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=main_menu()
        )
        await state.clear()
