"""Generation handlers for the Telegram bot.

This module contains handlers for:
- Audio generation and confirmation
- Video generation
- Text input handling
- Audio redo functionality
"""

import os
import sys
import time
from aiogram import F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from tg_bot.states import UGCCreation
from tg_bot.utils.credits import get_credits, spend_credits, add_credits
from tg_bot.utils.constants import COST_UGC_VIDEO
from tg_bot.utils.user_state import (
    get_selected_character, get_character_text, set_character_text,
    get_last_audio, set_last_audio,
    get_character_gender, get_character_age,
    get_original_character_path, get_edited_character_path,
    clear_edit_session,
    set_original_video
)
from tg_bot.utils.voice_mapping import get_voice_for_character, get_default_language, get_default_emotion
from tg_bot.utils.files import get_character_image
from tg_bot.utils.audio import check_audio_duration_limit, concatenate_audio_files
from tg_bot.utils.emotion_mapping import normalize_emotion
from tg_bot.utils.constants import DEFAULT_TTS_EMOTION
from tg_bot.services.openai_enhancement_service import enhance_prompt, parse_emotion_segments
from tg_bot.services.minimax_service import tts_to_file
from tg_bot.services.falai_service import generate_talking_head_video
from tg_bot.services.r2_service import download_file, delete_file
from tg_bot.keyboards import (
    back_to_main_menu, main_menu, video_editing_menu, segment_confirmation_menu,
    audio_confirmation_menu
)
from tg_bot.config import BASE_DIR
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)


@dp.message(StateFilter(UGCCreation.waiting_character_text), F.text)
async def character_text_received(m: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–∏–º–µ–Ω—è–µ–º prompt enhancement –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    set_character_text(m.from_user.id, m.text)
    logger.info(f"[GENERATION] User {m.from_user.id} entered text: {m.text[:100]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    gender = get_character_gender(m.from_user.id)
    age = get_character_age(m.from_user.id)
    
    if not gender:
        await m.answer(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        await m.answer("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —ç–º–æ—Ü–∏–∏...")
        
        # –í—ã–∑—ã–≤–∞–µ–º prompt enhancement
        logger.info(f"[GENERATION] Starting prompt enhancement...")
        enhanced_text = await enhance_prompt(m.text)
        
        # –ü–∞—Ä—Å–∏–º —Å–µ–≥–º–µ–Ω—Ç—ã —Å —ç–º–æ—Ü–∏—è–º–∏
        segments = parse_emotion_segments(enhanced_text)
        
        if not segments:
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–±–∏–≤–∫–∏
            logger.warning(f"[ENHANCEMENT] No segments parsed, using original text")
            segments = [{"emotion": DEFAULT_TTS_EMOTION, "text": m.text}]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —ç–º–æ—Ü–∏–∏
        for segment in segments:
            segment['emotion'] = normalize_emotion(segment['emotion'])
        
        logger.info(f"[GENERATION] Showing {len(segments)} segments to user for confirmation")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –≤ state
        await state.update_data(emotion_segments=segments)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π
        segments_text = "–†–∞–∑–±–∏–≤–∫–∞ –ø–æ —ç–º–æ—Ü–∏—è–º:\n\n"
        for i, segment in enumerate(segments, 1):
            segments_text += f"{i}. [{segment['emotion']}] {segment['text']}\n\n"
        
        segments_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç—É —Ä–∞–∑–±–∏–≤–∫—É?"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–±–∏–≤–∫—É
        await m.answer(
            segments_text,
            reply_markup=segment_confirmation_menu()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(UGCCreation.waiting_segment_confirmation)
        
    except Exception as e:
        logger.error(f"[ENHANCEMENT] OpenAI API error: {e}")
        await m.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=back_to_main_menu()
        )
        return


@dp.callback_query(F.data == "cancel_segments")
async def cancel_segments(c: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞–∑–±–∏–≤–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞."""
    logger.info(f"[GENERATION] User {c.from_user.id} cancelled emotion segments, returning to text input")
    await c.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ:")
    await state.set_state(UGCCreation.waiting_character_text)
    await c.answer()


@dp.callback_query(F.data == "confirm_segments")
async def confirm_segments(c: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –∏ –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ."""
    logger.info(f"[GENERATION] User {c.from_user.id} confirmed emotion segments")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ FSM state
    data = await state.get_data()
    segments = data.get('emotion_segments', [])
    logger.info(f"[GENERATION] Starting TTS generation for {len(segments)} segments")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∞–≤—Ç–æ–≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ–ª–æ—Å –ø–æ –ø–æ–ª—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    voice_id = get_voice_for_character(gender, age)
    language = get_default_language()
    
    logger.info(f"[UGC] –ê–≤—Ç–æ–≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞: gender={gender}, voice_id={voice_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
        credits = get_credits(c.from_user.id)
        if credits < COST_UGC_VIDEO:
            await m.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–Ω—É–∂–Ω–æ {COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç).\n\n"
                "–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
                reply_markup=main_menu()
            )
            await state.clear()
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç
        ok = spend_credits(c.from_user.id, COST_UGC_VIDEO, "ugc_video_creation")
        if not ok:
            await c.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞.\n\n"
                "–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=main_menu()
            )
            await state.clear()
            return
    
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º N –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å —ç–º–æ—Ü–∏—è–º–∏
        await c.message.answer(f"üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–∑–≤—É—á–∫—É ({len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤)...")
        logger.info(f"[UGC] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MiniMax TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c.from_user.id}, voice_id={voice_id}")
        
        audio_paths = []
        for i, segment in enumerate(segments):
            logger.info(f"[GENERATION] Segment {i+1}/{len(segments)}: emotion={segment['emotion']}, text={segment['text'][:50]}...")
            
            # –í–ê–ñ–ù–û: –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –µ–≥–æ —ç–º–æ—Ü–∏–µ–π
            try:
                audio_path = await tts_to_file(
                    text=segment['text'],
                    voice_id=voice_id,
                    language=language,
                    emotion=segment['emotion'],  # –ü–µ—Ä–µ–¥–∞—Ç—å —ç–º–æ—Ü–∏—é –∏–∑ —Ç–µ–≥–∞
                    user_id=c.from_user.id
                )
                
                if not audio_path:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}")
                
                logger.info(f"[GENERATION] Segment {i+1} TTS completed: {audio_path}")
                audio_paths.append(audio_path)
                
            except Exception as e:
                logger.error(f"[GENERATION] TTS failed for segment {i+1}: {e}")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_tts_fail")
                await c.message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=main_menu()
                )
                await state.clear()
                return
        
        logger.info(f"[GENERATION] All {len(audio_paths)} TTS segments generated successfully")
        
        # –°–∫–ª–µ–∏—Ç—å –≤—Å–µ –∞—É–¥–∏–æ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ —Å –ø–∞—É–∑–∞–º–∏
        logger.info(f"[GENERATION] Starting audio concatenation...")
        timestamp = int(time.time())
        audio_dir = BASE_DIR / "data" / "audio"
        audio_dir.mkdir(parents=True, exist_ok=True)
        final_audio_path = str(audio_dir / f"final_audio_{c.from_user.id}_{timestamp}.mp3")
        
        try:
            final_audio_path = await concatenate_audio_files(
                audio_paths=audio_paths,
                output_path=final_audio_path,
                pause_duration_ms=130
            )
            logger.info(f"[GENERATION] Audio concatenation completed: {final_audio_path}")
        except Exception as e:
            logger.error(f"[AUDIO_CONCAT] Concatenation failed: {e}")
            # Fallback: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
            if audio_paths:
                final_audio_path = audio_paths[0]
                logger.warning(f"[AUDIO_CONCAT] Using first segment as fallback: {final_audio_path}")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        audio_path = final_audio_path
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ
        set_last_audio(c.from_user.id, audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_valid, duration = check_audio_duration_limit(audio_path, max_seconds=30.0)
        
        logger.info(f"[UGC] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫, –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
        
        if not is_valid:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_audio_too_long")
            await c.message.answer(
                f"‚ùå <b>–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –æ–∑–≤—É—á–∫–∏: <b>{duration:.1f} —Å–µ–∫—É–Ω–¥</b>\n"
                f"–ú–∞–∫—Å–∏–º—É–º: <b>30 —Å–µ–∫—É–Ω–¥</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=back_to_main_menu()
            )
            # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                for temp_path in audio_paths:
                    if os.path.exists(temp_path):
                        os.remove(temp_path)
            except:
                pass
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–ª–µ–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        await c.message.answer("üéß –í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å –æ–∑–≤—É—á–∫–∞:")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            await c.message.answer_audio(
                FSInputFile(audio_path),
                caption="–ü–æ—Å–ª—É—à–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ï—Å–ª–∏ –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ."
            )
            logger.info(f"[GENERATION] Audio sent to user for confirmation")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
            await state.set_state(UGCCreation.waiting_audio_confirmation)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await c.message.answer(
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–∑–≤—É—á–∫—É?",
                reply_markup=audio_confirmation_menu()
            )
            await c.answer()
            
        except Exception as audio_send_error:
            logger.error(f"[GENERATION] Failed to send audio: {audio_send_error}")
            await c.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
                reply_markup=back_to_main_menu()
            )
            await state.clear()
            return
    
    except Exception as e:
        logger.error(f"[GENERATION] Error in confirm_segments: {e}")
        import traceback
        traceback.print_exc()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_segment_error")
        
        await c.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu()
        )
        await state.clear()
        await c.answer()


@dp.callback_query(F.data == "audio_redo")
async def audio_redo(c: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∞—É–¥–∏–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞."""
    logger.info(f"[GENERATION] User {c.from_user.id} requested audio redo, returning to text input")
    
    await c.message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ:")
    await state.set_state(UGCCreation.waiting_character_text)
    await c.answer()


@dp.callback_query(F.data == "audio_confirmed")
async def audio_confirmed(c: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ - –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ."""
    logger.info(f"[GENERATION] User {c.from_user.id} confirmed audio, starting video generation")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ –ø—É—Ç—å
    audio_path = get_last_audio(c.from_user.id)
    
    if not audio_path or not os.path.exists(audio_path):
        await c.message.answer(
            "‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu()
        )
        await state.clear()
        await c.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    character_idx = get_selected_character(c.from_user.id)
    
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
        await c.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã...\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        logger.info(f"[UGC] –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
        if not gender or not age or character_idx is None:
            raise Exception("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å). –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        edited_character_path = get_edited_character_path(c.from_user.id)
        temp_edited_path = None
        
        if edited_character_path:
            # Check if it's R2 key or local path
            if edited_character_path.startswith("users/"):
                # It's R2 key - download to temp for video generation
                temp_edited_path = f"data/temp_edits/temp_{int(time.time())}.jpg"
                
                if download_file(edited_character_path, temp_edited_path):
                    selected_frame = temp_edited_path
                    logger.info(f"[UGC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ R2: {edited_character_path}")
                else:
                    logger.info(f"[UGC] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑ R2, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                    character_data = get_character_image(gender, character_idx)
                    selected_frame = character_data[0] if character_data else None
            else:
                # Legacy local path support
                if os.path.exists(edited_character_path):
                    selected_frame = edited_character_path
                    logger.info(f"[UGC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: {edited_character_path}")
                else:
                    logger.info(f"[UGC] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª")
                    character_data = get_character_image(gender, character_idx)
                    selected_frame = character_data[0] if character_data else None
        else:
            # No edited version
            character_data = get_character_image(gender, character_idx)
            if character_data:
                selected_frame, detected_age = character_data
                logger.info(f"[UGC] –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {gender}/{detected_age}, –∏–Ω–¥–µ–∫—Å {character_idx}")
            else:
                selected_frame = None
        
        if not selected_frame:
            logger.info(f"[UGC] ‚ùå –ö–∞–¥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            if gender:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –ø–æ–ª={gender}, –∏–Ω–¥–µ–∫—Å={character_idx}")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–¥—Ä")
        
        if not audio_path or not os.path.exists(audio_path):
            logger.info(f"[UGC] ‚ùå –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª")
        
        logger.info(f"[UGC] –í—ã–±—Ä–∞–Ω –∫–∞–¥—Ä: {selected_frame}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é fal.ai OmniHuman
        logger.info(f"[UGC] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é talking head –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ fal.ai...")
        logger.info(f"[UGC] –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–¥—Ä: {selected_frame}")
        logger.info(f"[UGC] –ê—É–¥–∏–æ —Ñ–∞–π–ª: {audio_path}")
        
        try:
            logger.info(f"[UGC] Calling generate_talking_head_video with user_id: {c.from_user.id}")
            video_result = await generate_talking_head_video(
                audio_path=audio_path,
                image_path=selected_frame,
                user_id=c.from_user.id
            )
            
            if not video_result:
                logger.error(f"[UGC] ‚ùå generate_talking_head_video –≤–µ—Ä–Ω—É–ª None")
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")
            
            video_path = video_result['local_path']
            video_url = video_result.get('video_url')
            r2_video_key = video_result.get('r2_video_key')
            
            logger.info(f"[UGC] –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {video_path}")
            logger.info(f"[UGC] Video URL: {video_url}")
            logger.info(f"[UGC] R2 Video Key: {r2_video_key}")
            if r2_video_key:
                logger.info(f"[UGC] –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ R2: {r2_video_key}")
            else:
                logger.info(f"[UGC] ‚ö†Ô∏è R2 Video Key is None - video not saved to R2")
        except Exception as video_error:
            logger.error(f"[UGC] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {video_error}")
            import traceback
            traceback.print_exc()
            # –ê–≤—Ç–æ-—Ä–µ—Ñ–∞–Ω–¥ –∫—Ä–µ–¥–∏—Ç–∞ –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_ugc_fail")
            raise video_error  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –±–µ–∑ –æ–±–µ—Ä—Ç–∫–∏
        
        if video_path:
            await c.message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
            logger.info(f"[UGC] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º presigned URL –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
            if video_url:
                await c.message.answer_video(
                    video_url, 
                    caption=f"üéâ –¢–≤–æ—è UGC —Ä–µ–∫–ª–∞–º–∞ –≥–æ—Ç–æ–≤–∞!\n\n(-{COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω)"
                )
                logger.info(f"[UGC] ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ R2 URL")
            else:
                await c.message.answer_video(
                    FSInputFile(video_path), 
                    caption=f"üéâ –¢–≤–æ—è UGC —Ä–µ–∫–ª–∞–º–∞ –≥–æ—Ç–æ–≤–∞!\n\n(-{COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω)"
                )
                logger.info(f"[UGC] ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
            try:
                from tg_bot.utils.user_storage import save_user_generation
                logger.info(f"[UGC] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é...")
                logger.info(f"[UGC] User ID: {c.from_user.id}")
                logger.info(f"[UGC] R2 Video Key: {r2_video_key}")
                logger.info(f"[UGC] Character: {get_character_gender(c.from_user.id)}/{get_character_age(c.from_user.id)}")
                logger.info(f"[UGC] Text: {get_character_text(c.from_user.id)}")
                
                generation_id = save_user_generation(
                    user_id=c.from_user.id,
                    generation_type='video',
                    r2_video_key=r2_video_key,
                    r2_audio_key=None,  # –ê—É–¥–∏–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ MP4, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                    character_gender=get_character_gender(c.from_user.id),
                    character_age=get_character_age(c.from_user.id),
                    text_prompt=get_character_text(c.from_user.id),
                    credits_spent=COST_UGC_VIDEO
                )
                logger.info(f"[UGC] ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å ID: {generation_id}")
            except Exception as save_error:
                logger.info(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é: {save_error}")
                import traceback
                traceback.print_exc()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–Ω—Ç–∞–∂–∞
            set_original_video(c.from_user.id, r2_video_key, video_url)
            logger.info(f"[UGC] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞")
            
            # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if os.path.exists(video_path):
                    os.remove(video_path)
                    logger.info(f"[UGC] ‚úÖ –í–∏–¥–µ–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {video_path}")
            except Exception as cleanup_error:
                logger.info(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª: {cleanup_error}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            try:
                edited_path = get_edited_character_path(c.from_user.id)
                if edited_path:
                    # Check if it's R2 key or local path
                    if edited_path.startswith("users/"):
                        # It's R2 key - delete from R2
                        if delete_file(edited_path):
                            logger.info(f"[UGC] ‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ R2: {edited_path}")
                        else:
                            logger.info(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ R2: {edited_path}")
                    else:
                        # Legacy local path
                        if os.path.exists(edited_path):
                            os.remove(edited_path)
                            logger.info(f"[UGC] ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {edited_path}")
                    
                    # Also delete temp file if downloaded from R2
                    if temp_edited_path and os.path.exists(temp_edited_path):
                        os.remove(temp_edited_path)
                        logger.info(f"[UGC] ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_edited_path}")
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                clear_edit_session(c.from_user.id)
                logger.info(f"[UGC] ‚úÖ –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω–∞")
            except Exception as cleanup_error:
                logger.info(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {cleanup_error}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –º–æ–Ω—Ç–∞–∂ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await state.set_state(UGCCreation.waiting_editing_decision)
            await c.message.answer(
                "‚ú® –•–æ—á–µ—à—å —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ?\n\n"
                "üé¨ <b>–ú–æ–Ω—Ç–∞–∂</b> - –¥–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã\n"
                "‚úÖ <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å</b> - –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
                reply_markup=video_editing_menu(),
                parse_mode="HTML"
            )
            logger.info(f"[UGC] –ü—Ä–µ–¥–ª–æ–∂–µ–Ω –≤—ã–±–æ—Ä: –º–æ–Ω—Ç–∞–∂ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å")
        else:
            # –ê–≤—Ç–æ-—Ä–µ—Ñ–∞–Ω–¥ –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
            add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_ugc_fail")
            raise Exception("–í–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
    except Exception as e:
        logger.info(f"[UGC] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UGC —Ä–µ–∫–ª–∞–º—ã: {e}")
        import traceback
        traceback.print_exc()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            edited_path = get_edited_character_path(c.from_user.id)
            if edited_path and os.path.exists(edited_path):
                os.remove(edited_path)
                logger.info(f"[UGC] ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ: {edited_path}")
            clear_edit_session(c.from_user.id)
            logger.info(f"[UGC] ‚úÖ –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ")
        except Exception as cleanup_error:
            logger.info(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ: {cleanup_error}")
        
        # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        error_message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ"
        if "Exhausted balance" in str(e) or "User is locked" in str(e) or "TTS service temporarily unavailable" in str(e):
            error_message += "\n\nüîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        elif "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" in str(e) or "content_policy_violation" in str(e):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç
            add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_content_policy_violation")
            
            logger.info(f"[UGC] üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            from tg_bot.keyboards import character_editing_choice_menu
            
            gender = get_character_gender(c.from_user.id)
            character_idx = get_selected_character(c.from_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª
            await c.message.answer(
                "üö´ <b>–ö–∞–∂–µ—Ç—Å—è, —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–µ –≤–∏–¥–µ–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–æ—â–∞–¥–∫–∏</b>\n\n"
                "‚ùóÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–æ–º–æ—â—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–≥–æ:",
                parse_mode="HTML"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if gender and character_idx is not None:
                character_data = get_character_image(gender, character_idx)
                if character_data:
                    character_path, age = character_data
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        await c.message.answer_photo(
                            FSInputFile(character_path),
                            caption="üé® <b>–•–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?</b>\n\n"
                                    "–¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –æ–¥–µ–∂–¥—É –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.\n\n"
                                    "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏.",
                            reply_markup=character_editing_choice_menu(),
                            parse_mode="HTML"
                        )
                        await state.set_state(UGCCreation.waiting_editing_choice)
                        await c.answer()
                        return
                    except Exception as photo_error:
                        logger.error(f"[UGC] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {photo_error}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É
            from tg_bot.keyboards import gender_selection_menu
            await c.message.answer(
                "–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
                reply_markup=gender_selection_menu()
            )
            await state.set_state(UGCCreation.waiting_gender_selection)
            await c.answer()
            return
        else:
            if "API" in str(e) or "fal.ai" in str(e) or "TTS service error" in str(e):
                error_message += "\n\nüîß –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            else:
                error_message += "\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            
            await c.message.answer(
                error_message,
                reply_markup=main_menu()
            )
            await state.clear()
            await c.answer()
