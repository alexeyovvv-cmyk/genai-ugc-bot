"""Character selection handlers for the Telegram bot.

This module contains handlers for:
- Character gender/age selection
- Character gallery navigation
- Character picking
"""

from aiogram import F
from aiogram.types import CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.fsm.context import FSMContext

from tg_bot.states import UGCCreation
from tg_bot.utils.credits import ensure_user
from tg_bot.utils.user_state import (
    set_character_gender, get_character_gender,
    set_character_age, get_character_age,
    set_character_page, get_character_page,
    set_voice_page, get_voice_page,
    set_selected_character, set_original_character_path
)
from tg_bot.utils.files import list_character_images, get_character_image
from tg_bot.keyboards import (
    gender_selection_menu, age_selection_menu,
    character_gallery_menu, character_edit_offer_menu
)
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)


@dp.callback_query(F.data == "select_character")
async def select_character(c: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –ø–æ–ª–∞"""
    ensure_user(c.from_user.id)
    await c.message.edit_text(
        "üë§ <b>–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=gender_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_gender_selection)
    await c.answer()


@dp.callback_query(F.data == "gender_male")
async def gender_male_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º—É–∂—Å–∫–æ–π –ø–æ–ª"""
    ensure_user(c.from_user.id)
    set_character_gender(c.from_user.id, "male")
    logger.info(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: –º—É–∂—Å–∫–æ–π")
    
    await c.message.edit_text(
        "üë® <b>–ú—É–∂—Å–∫–æ–π –ø–æ–ª –≤—ã–±—Ä–∞–Ω</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=age_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_age_selection)
    await c.answer()


@dp.callback_query(F.data == "gender_female")
async def gender_female_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∂–µ–Ω—Å–∫–∏–π –ø–æ–ª"""
    ensure_user(c.from_user.id)
    set_character_gender(c.from_user.id, "female")
    logger.info(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: –∂–µ–Ω—Å–∫–∏–π")
    
    await c.message.edit_text(
        "üë© <b>–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª –≤—ã–±—Ä–∞–Ω</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=age_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_age_selection)
    await c.answer()


@dp.callback_query(F.data == "age_young")
async def age_young_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–ª–æ–¥–æ–π –≤–æ–∑—Ä–∞—Å—Ç"""
    ensure_user(c.from_user.id)
    set_character_age(c.from_user.id, "young")
    set_character_page(c.from_user.id, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    logger.info(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç: –º–æ–ª–æ–¥–æ–π")
    
    await show_character_gallery(c, state)


@dp.callback_query(F.data == "age_elderly")
async def age_elderly_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–∂–∏–ª–æ–π –≤–æ–∑—Ä–∞—Å—Ç"""
    ensure_user(c.from_user.id)
    set_character_age(c.from_user.id, "elderly")
    set_character_page(c.from_user.id, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    logger.info(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç: –ø–æ–∂–∏–ª–æ–π")
    
    await show_character_gallery(c, state)


async def show_character_gallery(c: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    page = get_character_page(c.from_user.id)
    
    if not gender or not age:
        await c.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=back_to_main_menu()
        )
        return await c.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    images, has_next = list_character_images(gender, age, page, limit=5)
    
    if not images:
        await c.message.edit_text(
            f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</b>\n\n"
            f"–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ–ª: {gender}, –≤–æ–∑—Ä–∞—Å—Ç: {age}) "
            f"–ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
            parse_mode="HTML",
            reply_markup=character_gallery_menu(page, has_next, len(images))
        )
        return await c.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º (–¥–æ 5 –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ)
    media = []
    for idx, image_path in enumerate(images):
        global_index = page * 5 + idx
        caption = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å R2 –∫–ª—é—á–æ–º –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º
        if image_path.startswith('presets/'):
            # –≠—Ç–æ R2 –∫–ª—é—á, –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å presigned URL
            from tg_bot.utils.files import get_character_image_url
            from tg_bot.services.r2_service import download_file
            import tempfile
            import os
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ R2
            if download_file(image_path, temp_path):
                media.append(
                    InputMediaPhoto(
                        media=FSInputFile(temp_path),
                        caption=caption
                    )
                )
            else:
                logger.warning(f"Failed to download R2 file: {image_path}")
                continue
        else:
            # –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
            media.append(
                InputMediaPhoto(
                    media=FSInputFile(image_path),
                    caption=caption
                )
            )
    
    if media:
        await c.message.answer_media_group(media)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for item in media:
            if hasattr(item.media, 'path') and item.media.path.startswith('/tmp'):
                try:
                    os.unlink(item.media.path)
                except:
                    pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await c.message.answer(
        f"üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ ({gender}, {age})</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}. –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=character_gallery_menu(page, has_next, len(images))
    )
    
    await state.set_state(UGCCreation.waiting_character_gallery)
    await c.answer()


@dp.callback_query(F.data.startswith("char_page:"))
async def character_page_changed(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    ensure_user(c.from_user.id)
    page = int(c.data.split(":", 1)[1])
    set_character_page(c.from_user.id, page)
    logger.info(f"User {c.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
    
    await show_character_gallery(c, state)


@dp.callback_query(F.data.startswith("char_pick:"))
async def character_picked(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    ensure_user(c.from_user.id)
    idx = int(c.data.split(":", 1)[1])
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_image = get_character_image(gender, age, idx)
    
    if not character_image:
        await c.message.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ.")
        return await c.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
    set_selected_character(c.from_user.id, idx)
    set_voice_page(c.from_user.id, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤
    logger.info(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ #{idx+1} ({gender}, {age})")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    set_original_character_path(c.from_user.id, character_image)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await c.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ #{idx+1}")
    await c.message.answer_photo(FSInputFile(character_image))
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await c.message.answer(
        "üé® <b>–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n"
        "‚Ä¢ –§–æ–Ω (–ø–ª—è–∂, –æ—Ñ–∏—Å, —É–ª–∏—Ü–∞)\n"
        "‚Ä¢ –û–¥–µ–∂–¥—É (–¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å, casual)\n"
        "‚Ä¢ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã (–æ—á–∫–∏, —à–ª—è–ø–∞)\n"
        "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!",
        parse_mode="HTML",
        reply_markup=character_edit_offer_menu()
    )
    
    await state.set_state(UGCCreation.waiting_edit_decision)
    await c.answer()


@dp.callback_query(F.data == "back_to_character_gallery")
async def back_to_character_gallery(c: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–∞–ª–µ—Ä–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –≥–æ–ª–æ—Å–æ–≤"""
    await show_character_gallery(c, state)


@dp.callback_query(F.data == "change_character_params")
async def change_character_params(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await c.message.edit_text(
        "üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=gender_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_gender_selection)
    await c.answer()


@dp.callback_query(F.data == "back_to_gender")
async def back_to_gender(c: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
    await c.message.edit_text(
        "üë§ <b>–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=gender_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_gender_selection)
    await c.answer()


@dp.callback_query(F.data == "back_to_age")
async def back_to_age(c: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    gender = get_character_gender(c.from_user.id)
    gender_text = "üë® –ú—É–∂—Å–∫–æ–π" if gender == "male" else "üë© –ñ–µ–Ω—Å–∫–∏–π"
    
    await c.message.edit_text(
        f"üë§ <b>–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        f"–ü–æ–ª: {gender_text}\n"
        f"–í—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=age_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_age_selection)
    await c.answer()
