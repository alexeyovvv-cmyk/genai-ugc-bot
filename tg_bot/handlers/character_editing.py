"""Character editing handlers for the Telegram bot.

This module contains handlers for:
- Character editing decisions
- Edit prompts handling
- Edit result decisions
"""

import os
import time
from aiogram import F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext

from tg_bot.states import UGCCreation
from tg_bot.utils.user_state import (
    get_original_character_path, get_edited_character_path,
    set_original_character_path, set_edited_character_path, 
    increment_edit_iteration, clear_edit_session, set_voice_page
)
from tg_bot.services.nano_banana_service import edit_character_image
from tg_bot.keyboards import (
    edit_result_menu, edit_error_menu
)
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)


@dp.callback_query(F.data == "edit_character_yes")
async def edit_character_yes(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    logger.info(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
    
    try:
        await c.message.answer(
            "üìù <b>–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ '–∏–∑–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ –ø–ª—è–∂'\n"
            "‚Ä¢ '–¥–æ–±–∞–≤—å –æ—á–∫–∏'\n"
            "‚Ä¢ '–ø–æ–º–µ–Ω—è–π –æ–¥–µ–∂–¥—É –Ω–∞ –¥–µ–ª–æ–≤–æ–π –∫–æ—Å—Ç—é–º'\n"
            "‚Ä¢ '–¥–æ–±–∞–≤—å —à–ª—è–ø—É'\n\n"
            "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
            parse_mode="HTML"
        )
        logger.info(f"User {c.from_user.id} - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        await state.set_state(UGCCreation.waiting_edit_prompt)
        logger.info(f"User {c.from_user.id} - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: waiting_edit_prompt")
        
        await c.answer()
        logger.info(f"User {c.from_user.id} - callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"User {c.from_user.id} - –æ—à–∏–±–∫–∞ –≤ edit_character_yes: {e}", exc_info=True)
        await c.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.callback_query(F.data == "edit_character_no")
async def edit_character_no(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    logger.info(f"User {c.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞")
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    clear_edit_session(c.from_user.id)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞
    from tg_bot.handlers.voice_selection import show_voice_gallery
    await show_voice_gallery(c, state)


@dp.message(F.text)
async def debug_text_handler(m: Message, state: FSMContext):
    """DEBUG: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    logger.info(f"üîµ DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {m.from_user.id}: '{m.text}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_state}")

@dp.message(F.text, UGCCreation.waiting_edit_prompt)
async def handle_edit_prompt(m: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    logger.info(f"üî¥ DEBUG: handle_edit_prompt –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m.from_user.id}")
    prompt = m.text.strip()
    logger.info(f"User {m.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {prompt}")
    logger.info(f"User {m.from_user.id} - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {await state.get_state()}")
    
    if not prompt:
        logger.warning(f"User {m.from_user.id} - –ø—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç")
        await m.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logger.info(f"User {m.from_user.id} - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–º–ø—Ç–∞")
    processing_msg = await m.answer("‚è≥ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
    logger.info(f"User {m.from_user.id} - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏–ª–∏ —É–∂–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
        original_path = get_original_character_path(m.from_user.id)
        edited_path = get_edited_character_path(m.from_user.id)
        current_image_path = edited_path or original_path
        
        logger.info(f"User {m.from_user.id} - original_path: {original_path}, edited_path: {edited_path}, current_image_path: {current_image_path}")
        
        if not current_image_path:
            logger.error(f"User {m.from_user.id} - –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
            await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
            return
        
        # –ï—Å–ª–∏ current_image_path —ç—Ç–æ R2 –∫–ª—é—á, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if current_image_path.startswith("users/"):
            from tg_bot.services.r2_service import download_file
            temp_edit_path = f"data/temp_edits/edit_{int(time.time())}.jpg"
            if download_file(current_image_path, temp_edit_path):
                current_image_path = temp_edit_path
                logger.info(f"–°–∫–∞—á–∞–ª–∏ –∏–∑ R2 –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {current_image_path}")
            else:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"User {m.from_user.id} - –≤—ã–∑—ã–≤–∞–µ–º edit_character_image —Å –ø—É—Ç–µ–º: {current_image_path}")
        new_edited_path = await edit_character_image(current_image_path, prompt)
        logger.info(f"User {m.from_user.id} - edit_character_image –≤–µ—Ä–Ω—É–ª: {new_edited_path}")
        
        if new_edited_path:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
            if edited_path and edited_path != original_path:
                try:
                    if os.path.exists(edited_path):
                        os.remove(edited_path)
                except Exception as e:
                    logger.warning(f"Could not delete old edited image {edited_path}: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            set_edited_character_path(m.from_user.id, new_edited_path)
            increment_edit_iteration(m.from_user.id)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª —Å–∫–∞—á–∞–Ω –∏–∑ R2)
            if current_image_path.startswith("data/temp_edits/edit_"):
                try:
                    os.remove(current_image_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {current_image_path}")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.delete()
            await m.answer("‚ú® <b>–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b>", parse_mode="HTML")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∞—Ç—å –∏–∑ R2 –¥–ª—è –ø–æ–∫–∞–∑–∞
            if new_edited_path.startswith("users/"):
                # –≠—Ç–æ R2 –∫–ª—é—á - —Å–∫–∞—á–∏–≤–∞–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞
                from tg_bot.services.r2_service import download_file
                temp_show_path = f"data/temp_edits/show_{int(time.time())}.jpg"
                if download_file(new_edited_path, temp_show_path):
                    await m.answer_photo(FSInputFile(temp_show_path))
                    # –ù–ï —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª - –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è:
                    # 1. Video generation (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ä–µ–¥–∞–∫—Ü–∏—é")
                    # 2. –°–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –≤—ã–±–µ—Ä–µ—Ç "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ")
                    # –£–¥–∞–ª–∏–º –µ–≥–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –≤—ã–±–æ—Ä–µ
                else:
                    await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞")
            else:
                # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                await m.answer_photo(FSInputFile(new_edited_path))
            
            await m.answer(
                "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                reply_markup=edit_result_menu()
            )
            await state.set_state(UGCCreation.waiting_edit_result_decision)
        else:
            await processing_msg.edit_text(
                "‚ùå <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                parse_mode="HTML",
                reply_markup=edit_error_menu()
            )
            await state.set_state(UGCCreation.waiting_edit_result_decision)
            
    except Exception as e:
        logger.error(f"User {m.from_user.id} - Error in character editing: {e}", exc_info=True)
        await processing_msg.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
            parse_mode="HTML",
            reply_markup=edit_error_menu()
        )
        await state.set_state(UGCCreation.waiting_edit_result_decision)


@dp.callback_query(F.data == "use_edited_character")
async def use_edited_character(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    edited_path = get_edited_character_path(c.from_user.id)
    
    if edited_path and os.path.exists(edited_path):
        # –ù–ï –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π!
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
        # –í video generation –º—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å edited_character_path
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é: {edited_path}")
        logger.info(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ video generation")
    else:
        logger.warning(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º edited_character_path
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π –∏ original_character_path
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º edited_character_path
    set_original_character_path(c.from_user.id, None)
    # edited_character_path –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ video generation
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–∫–∞–∑–∞ (–µ—Å–ª–∏ –±—ã–ª —Å–∫–∞—á–∞–Ω –∏–∑ R2)
    try:
        import glob
        temp_files = glob.glob("data/temp_edits/show_*.jpg")
        for temp_file in temp_files:
            if os.path.exists(temp_file):
                os.remove(temp_file)
                logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–∫–∞–∑–∞: {temp_file}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞
    from tg_bot.handlers.voice_selection import show_voice_gallery
    await show_voice_gallery(c, state)


@dp.callback_query(F.data == "use_original_character")
async def use_original_character(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é"""
    # –£–¥–∞–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    edited_path = get_edited_character_path(c.from_user.id)
    if edited_path:
        try:
            # Check if it's R2 key or local path
            if edited_path.startswith("users/"):
                # It's R2 key - delete from R2
                from tg_bot.services.r2_service import delete_file
                if delete_file(edited_path):
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ R2: {edited_path}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ R2: {edited_path}")
            else:
                # Legacy local path
                if os.path.exists(edited_path):
                    os.remove(edited_path)
                    logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {edited_path}")
        except Exception as e:
            logger.warning(f"Could not delete edited image {edited_path}: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    clear_edit_session(c.from_user.id)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–∫–∞–∑–∞ (–µ—Å–ª–∏ –±—ã–ª —Å–∫–∞—á–∞–Ω –∏–∑ R2)
    try:
        import glob
        temp_files = glob.glob("data/temp_edits/show_*.jpg")
        for temp_file in temp_files:
            if os.path.exists(temp_file):
                os.remove(temp_file)
                logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–∫–∞–∑–∞: {temp_file}")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥–æ–ª–æ—Å–∞
    from tg_bot.handlers.voice_selection import show_voice_gallery
    await show_voice_gallery(c, state)


@dp.callback_query(F.data == "continue_editing")
async def continue_editing(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await c.message.answer(
        "üìù <b>–û–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>\n\n"
        "–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ?",
        parse_mode="HTML"
    )
    await state.set_state(UGCCreation.waiting_edit_prompt)
    await c.answer()


@dp.callback_query(F.data == "retry_edit_prompt")
async def retry_edit_prompt(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç"""
    await c.message.answer(
        "üìù <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.",
        parse_mode="HTML"
    )
    await state.set_state(UGCCreation.waiting_edit_prompt)
    await c.answer()
