"""Navigation handlers for the Telegram bot.

This module contains handlers for:
- Back navigation
- Main menu navigation
- UGC creation flow navigation
"""

from aiogram import F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from tg_bot.utils.credits import get_credits
from tg_bot.keyboards import (
    main_menu, ugc_start_menu, back_to_main_menu
)
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)


@dp.callback_query(F.data == "back_to_main")
async def back_to_main(c: CallbackQuery, state: FSMContext):
    """Return to main menu"""
    current_credits = get_credits(c.from_user.id)
    await c.message.edit_text(
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å Datanauts.co</b>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥–µ—Å—è—Ç–∫–∏ UGC-like —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: <b>{current_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>. 1 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ = 1 –∫—Ä–µ–¥–∏—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=main_menu()
    )
    await state.clear()
    await c.answer()


@dp.callback_query(F.data == "back_previous")
async def back_previous(c: CallbackQuery):
    """Return to previous menu"""
    current_credits = get_credits(c.from_user.id)
    await c.message.edit_text(
       "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å Datanauts.co</b>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥–µ—Å—è—Ç–∫–∏ UGC-like —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: <b>{current_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>. 1 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ = 1 –∫—Ä–µ–¥–∏—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=main_menu()
    )
    await c.answer()


@dp.callback_query(F.data == "back_to_ugc")
async def back_to_ugc(c: CallbackQuery, state: FSMContext):
    """Return to UGC creation menu"""
    await c.message.edit_text(
        "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=ugc_start_menu()
    )
    await state.clear()
    await c.answer()


@dp.callback_query(F.data == "create_ugc")
async def start_ugc_creation(c: CallbackQuery, state: FSMContext):
    """Start UGC creation process - redirect to format selection"""
    from tg_bot.handlers.format_selection import show_format_selection
    await show_format_selection(c, state)


@dp.callback_query(F.data == "create_character")
async def create_character(c: CallbackQuery):
    """Handle create character option (not implemented yet)"""
    await c.message.answer(
        "‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è! üöÄ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.",
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    await c.answer()


@dp.message(Command("main"))
async def open_main_menu(m: Message, state: FSMContext):
    """Handle /main command"""
    await state.clear()
    current_credits = get_credits(m.from_user.id)
    await m.answer(
       "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å Datanauts.co</b>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥–µ—Å—è—Ç–∫–∏ UGC-like —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–æ–ª–∏–∫–æ–≤ –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: <b>{current_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>. 1 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ = 1 –∫—Ä–µ–¥–∏—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=main_menu()
    )


@dp.message(Command("create_ads"))
async def open_create_ads(m: Message, state: FSMContext):
    """Handle /create_ads command"""
    await state.clear()
    await m.answer(
        "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=ugc_start_menu()
    )


@dp.message(Command("create"))
async def open_create(m: Message, state: FSMContext):
    """Handle /create command - redirect to format selection"""
    from tg_bot.utils.credits import ensure_user
    ensure_user(
        m.from_user.id,
        first_name=m.from_user.first_name,
        last_name=m.from_user.last_name,
        username=m.from_user.username
    )
    await state.clear()
    
    from tg_bot.handlers.format_selection import send_format_examples
    from tg_bot.keyboards import format_selection_menu
    from tg_bot.states import UGCCreation
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–∏–¥–µ–æ
    try:
        await send_format_examples(m)
    except Exception as e:
        logger.error(f"Failed to send format examples: {e}")
    
    # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
    await m.answer(
        "‚òùÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        parse_mode="HTML",
        reply_markup=format_selection_menu()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(UGCCreation.waiting_format_selection)
