"""Credits handlers for the Telegram bot.

This module contains handlers for:
- Credits balance display
- Top-up requests
- Credits history
"""

from aiogram import F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

from tg_bot.utils.credits import get_credits
from tg_bot.utils.constants import COST_UGC_VIDEO
from tg_bot.keyboards import credits_menu, back_to_main_menu
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)


@dp.callback_query(F.data == "credits")
async def show_credits(c: CallbackQuery):
    """Show user's credits balance and history"""
    from sqlalchemy import select
    from tg_bot.db import SessionLocal
    from tg_bot.models import User, CreditLog
    
    cts = get_credits(c.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
    with SessionLocal() as db:
        user = db.scalar(select(User).where(User.tg_id == c.from_user.id))
        if user:
            logs = db.execute(
                select(CreditLog)
                .where(CreditLog.user_id == user.id)
                .order_by(CreditLog.created_at.desc())
                .limit(5)
            ).scalars().all()
        else:
            logs = []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history_text = ""
    if logs:
        history_text = "\n\nüìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
        for log in logs:
            sign = "+" if log.delta > 0 else ""
            emoji = "üìà" if log.delta > 0 else "üìâ"
            reason_map = {
                "signup_bonus": "–ë–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                "ugc_video_creation": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UGC –≤–∏–¥–µ–æ",
                "refund_ugc_fail": "–í–æ–∑–≤—Ä–∞—Ç (–æ—à–∏–±–∫–∞)",
                "admin_add": "–ù–∞—á–∏—Å–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            }
            reason_text = reason_map.get(log.reason, log.reason)
            history_text += f"{emoji} {sign}{log.delta} ‚Äî {reason_text}\n"
    
    await c.message.answer(
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: <b>{cts} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
        f"üí° <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n"
        f"‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UGC –≤–∏–¥–µ–æ: {COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç"
        f"{history_text}",
        parse_mode="HTML",
        reply_markup=credits_menu()
    )
    await c.answer()


@dp.callback_query(F.data == "topup_request")
async def topup_request(c: CallbackQuery):
    """Handle top-up request"""
    await c.message.answer(
        (
            "–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            f"–í–∞—à Telegram ID: <b>{c.from_user.id}</b>\n"
            "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."
        ),
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    await c.answer()


@dp.message(Command("credits"))
async def open_credits(m: Message):
    """Handle /credits command"""
    from sqlalchemy import select
    from tg_bot.db import SessionLocal
    from tg_bot.models import User, CreditLog
    
    cts = get_credits(m.from_user.id)
    with SessionLocal() as db:
        user = db.scalar(select(User).where(User.tg_id == m.from_user.id))
        if user:
            logs = db.execute(
                select(CreditLog)
                .where(CreditLog.user_id == user.id)
                .order_by(CreditLog.created_at.desc())
                .limit(5)
            ).scalars().all()
        else:
            logs = []
    
    history_text = ""
    if logs:
        history_text = "\n\nüìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
        for log in logs:
            sign = "+" if log.delta > 0 else ""
            emoji = "üìà" if log.delta > 0 else "üìâ"
            reason_map = {
                "signup_bonus": "–ë–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                "ugc_video_creation": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UGC –≤–∏–¥–µ–æ",
                "refund_ugc_fail": "–í–æ–∑–≤—Ä–∞—Ç (–æ—à–∏–±–∫–∞)",
                "admin_add": "–ù–∞—á–∏—Å–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            }
            reason_text = reason_map.get(log.reason, log.reason)
            history_text += f"{emoji} {sign}{log.delta} ‚Äî {reason_text}\n"
    
    await m.answer(
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: <b>{cts} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
        f"üí° <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n"
        f"‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UGC –≤–∏–¥–µ–æ: {COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç"
        f"{history_text}",
        parse_mode="HTML",
        reply_markup=credits_menu()
    )
