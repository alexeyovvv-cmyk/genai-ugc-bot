"""Format selection handlers for the Telegram bot.

This module contains handlers for:
- Video format selection (talking head / character with background)
- Background video upload and validation
- Sending format examples from R2
"""

import os
import time
from aiogram import F
from aiogram.types import CallbackQuery, Message, FSInputFile, InputMediaVideo
from aiogram.fsm.context import FSMContext

from tg_bot.states import UGCCreation
from tg_bot.utils.credits import ensure_user
from tg_bot.utils.user_state import set_video_format, set_background_video_path
from tg_bot.keyboards import format_selection_menu, back_to_main_menu
from tg_bot.services.r2_service import download_file, upload_file, get_presigned_url
from tg_bot.utils.logger import setup_logger
from tg_bot.dispatcher import dp

logger = setup_logger(__name__)

# –ü—É—Ç–∏ –∫ –ø—Ä–∏–º–µ—Ä–∞–º —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞ R2
EXAMPLE_TALKING_HEAD_KEY = "examples/talking_head.mp4"
EXAMPLE_CHARACTER_BACKGROUND_KEY = "examples/character_with_background.mp4"


async def show_format_selection(c: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è UGC.
    """
    ensure_user(
        c.from_user.id,
        first_name=c.from_user.first_name,
        last_name=c.from_user.last_name,
        username=c.from_user.username
    )
    
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ)
    await c.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–∏–¥–µ–æ –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
    try:
        await send_format_examples(c.message)
    except Exception as e:
        logger.error(f"Failed to send format examples: {e}")
    
    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
    await c.message.answer(
        "‚òùÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:",
        parse_mode="HTML",
        reply_markup=format_selection_menu()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    await state.set_state(UGCCreation.waiting_format_selection)
    await c.answer()


async def send_format_examples(message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–∏–¥–µ–æ –∏–∑ R2 –∫–∞–∫ media group (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º presigned URLs –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        talking_head_url = get_presigned_url(EXAMPLE_TALKING_HEAD_KEY, expiry_hours=1)
        character_bg_url = get_presigned_url(EXAMPLE_CHARACTER_BACKGROUND_KEY, expiry_hours=1)
        
        if talking_head_url and character_bg_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ media group (–∞–ª—å–±–æ–º) - –±—É–¥–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
            media = [
                InputMediaVideo(
                    media=talking_head_url,
                    caption=(
                        "üé¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∞—à–µ–π UGC —Ä–µ–∫–ª–∞–º—ã:</b>\n\n"
                        "1Ô∏è‚É£ <b>–ì–æ–≤–æ—Ä—è—â–∞—è –≥–æ–ª–æ–≤–∞</b> - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º\n\n"
                        "2Ô∏è‚É£ <b>–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –±–µ–∫–≥—Ä–∞—É–Ω–¥–æ–º</b> - –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ —Ñ–æ–Ω–µ –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ"
                    ),
                    parse_mode="HTML"
                ),
                InputMediaVideo(
                    media=character_bg_url,
                    parse_mode="HTML"
                )
            ]
            await message.answer_media_group(media)
            logger.info("Format examples sent as media group via presigned URLs")
            return
    except Exception as e:
        logger.warning(f"Failed to send examples via URLs: {e}, trying download method")
    
    # Fallback: —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∫–∞–∫ media group
    temp_dir = "temp_downloads"
    os.makedirs(temp_dir, exist_ok=True)
    
    talking_head_path = os.path.join(temp_dir, "example_talking_head.mp4")
    character_bg_path = os.path.join(temp_dir, "example_character_bg.mp4")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑ R2
        talking_head_downloaded = download_file(EXAMPLE_TALKING_HEAD_KEY, talking_head_path)
        character_bg_downloaded = download_file(EXAMPLE_CHARACTER_BACKGROUND_KEY, character_bg_path)
        
        if talking_head_downloaded and character_bg_downloaded:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ media group
            media = [
                InputMediaVideo(
                    media=FSInputFile(talking_head_path),
                    caption=(
                        "üé¨ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤–∞—à–µ–π UGC —Ä–µ–∫–ª–∞–º—ã:</b>\n\n"
                        "1Ô∏è‚É£ <b>–ì–æ–≤–æ—Ä—è—â–∞—è –≥–æ–ª–æ–≤–∞</b> - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º\n\n"
                        "2Ô∏è‚É£ <b>–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –±–µ–∫–≥—Ä–∞—É–Ω–¥–æ–º</b> - –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ —Ñ–æ–Ω–µ –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ"
                    ),
                    parse_mode="HTML"
                ),
                InputMediaVideo(
                    media=FSInputFile(character_bg_path),
                    parse_mode="HTML"
                )
            ]
            await message.answer_media_group(media)
            logger.info("Format examples sent as media group via download method")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            os.remove(talking_head_path)
            os.remove(character_bg_path)
        else:
            logger.error("Failed to download one or both example videos")
    except Exception as e:
        logger.error(f"Failed to send format examples via download: {e}")


@dp.callback_query(F.data == "format_talking_head")
async def format_talking_head_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç '–ì–æ–≤–æ—Ä—è—â–∞—è –≥–æ–ª–æ–≤–∞'"""
    logger.info(f"User {c.from_user.id} selected format: talking_head")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    set_video_format(c.from_user.id, "talking_head")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–æ–±—ã—á–Ω—ã–π —Ñ–ª–æ—É)
    await c.message.edit_text(
        "üë§ <b>–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML"
    )
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from tg_bot.handlers.character_selection import select_character
    await select_character(c, state)


@dp.callback_query(F.data == "format_character_background")
async def format_character_background_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç '–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å –±–µ–∫–≥—Ä–∞—É–Ω–¥–æ–º'"""
    logger.info(f"User {c.from_user.id} selected format: character_with_background")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    set_video_format(c.from_user.id, "character_with_background")
    
    # –ü—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
    await c.message.edit_text(
        "üé¨ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞ —Ñ–æ–Ω–µ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "‚ö†Ô∏è <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: MP4, MOV, AVI\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –¥–æ 15 —Å–µ–∫—É–Ω–¥\n\n"
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –∫–∞–∫ —Ñ–∞–π–ª –∏–ª–∏ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ.",
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
    await state.set_state(UGCCreation.waiting_background_video)
    await c.answer()


@dp.message(UGCCreation.waiting_background_video, F.video | F.document)
async def handle_background_video_upload(m: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ"""
    logger.info(f"User {m.from_user.id} uploaded background video")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await m.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∏–¥–µ–æ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º file_id –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        if m.video:
            file_id = m.video.file_id
            file_name = f"video_{int(time.time())}.mp4"
        elif m.document:
            file_id = m.document.file_id
            file_name = m.document.file_name or f"video_{int(time.time())}.mp4"
        else:
            await processing_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.",
                reply_markup=back_to_main_menu()
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        from tg_bot.main import bot
        file = await bot.get_file(file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = "temp_videos"
        os.makedirs(temp_dir, exist_ok=True)
        temp_path = os.path.join(temp_dir, file_name)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file.file_path, temp_path)
        logger.info(f"Downloaded video to {temp_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ R2 (–ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–±—Ä–∞–ª–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)
        await processing_msg.edit_text("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –≤–∏–¥–µ–æ...")
        
        r2_key = f"users/{m.from_user.id}/backgrounds/background_{int(time.time())}.mp4"
        upload_success = upload_file(temp_path, r2_key)
        
        if not upload_success:
            await processing_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=back_to_main_menu()
            )
            os.remove(temp_path)
            logger.error(f"Failed to upload video to R2 for user {m.from_user.id}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ–Ω–æ–≤–æ–º—É –≤–∏–¥–µ–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_background_video_path(m.from_user.id, r2_key)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
        logger.info(f"Background video saved to R2: {r2_key}")
        
        # –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        await processing_msg.edit_text(
            f"‚úÖ <b>–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã.",
            parse_mode="HTML"
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        from tg_bot.keyboards import gender_selection_menu
        await m.answer(
            "üë§ <b>–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            parse_mode="HTML",
            reply_markup=gender_selection_menu()
        )
        await state.set_state(UGCCreation.waiting_gender_selection)
        
    except Exception as e:
        logger.error(f"Error processing background video: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=back_to_main_menu()
        )


@dp.callback_query(F.data == "back_to_format_selection")
async def back_to_format_selection(c: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞"""
    logger.info(f"User {c.from_user.id} returned to format selection")
    await show_format_selection(c, state)


