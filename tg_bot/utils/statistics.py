# statistics.py ‚Äî –º–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
import os
from datetime import datetime, date
from typing import Optional
from sqlalchemy import select, text, func
from tg_bot.db import SessionLocal
from tg_bot.models import User, CreditLog, UserActivity


def get_moscow_time() -> datetime:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π —Ç–∞–π–º–∑–æ–Ω–µ"""
    import pytz
    moscow_tz = pytz.timezone('Europe/Moscow')
    return datetime.now(moscow_tz)


def get_moscow_date() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π —Ç–∞–π–º–∑–æ–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
    return get_moscow_time().strftime('%Y-%m-%d')


def track_user_activity(tg_id: int) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É"""
    current_date = get_moscow_date()
    
    with SessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π user_id
        user = db.scalar(select(User).where(User.tg_id == tg_id))
        if not user:
            print(f"[STATS] User {tg_id} not found for activity tracking")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_activity = db.scalar(
            select(UserActivity).where(UserActivity.user_id == user.id)
        )
        
        if existing_activity:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            existing_activity.last_activity_date = current_date
            print(f"[STATS] Updated activity for user {tg_id} to {current_date}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_activity = UserActivity(
                user_id=user.id,
                last_activity_date=current_date
            )
            db.add(new_activity)
            print(f"[STATS] Created new activity record for user {tg_id} on {current_date}")
        
        db.commit()


def get_new_users_count(target_date: str) -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        print(f"[STATS] Getting new users count for date: {target_date}")
        with SessionLocal() as db:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL –∏ SQLite
            result = db.execute(text("""
                SELECT COUNT(*) 
                FROM users 
                WHERE DATE(created_at) = :target_date
            """), {"target_date": target_date}).scalar()
            
            count = result or 0
            print(f"[STATS] New users count: {count}")
            return count
    except Exception as e:
        print(f"[STATS] ‚ùå ERROR in get_new_users_count: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return 0


def get_active_users_count(target_date: str) -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        print(f"[STATS] Getting active users count for date: {target_date}")
        with SessionLocal() as db:
            result = db.execute(text("""
                SELECT COUNT(DISTINCT user_id) 
                FROM user_activity 
                WHERE last_activity_date = :target_date
            """), {"target_date": target_date}).scalar()
            
            count = result or 0
            print(f"[STATS] Active users count: {count}")
            return count
    except Exception as e:
        print(f"[STATS] ‚ùå ERROR in get_active_users_count: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return 0


def get_credits_spent(target_date: str) -> int:
    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
    try:
        print(f"[STATS] Getting credits spent for date: {target_date}")
        with SessionLocal() as db:
            result = db.execute(text("""
                SELECT COALESCE(SUM(ABS(delta)), 0) 
                FROM credit_log 
                WHERE delta < 0 AND DATE(created_at) = :target_date
            """), {"target_date": target_date}).scalar()
            
            spent = result or 0
            print(f"[STATS] Credits spent: {spent}")
            return spent
    except Exception as e:
        print(f"[STATS] ‚ùå ERROR in get_credits_spent: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return 0


def get_total_users_count() -> int:
    """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ"""
    try:
        print("[STATS] Getting total users count...")
        with SessionLocal() as db:
            result = db.execute(select(func.count(User.id))).scalar()
            count = result or 0
            print(f"[STATS] Total users count: {count}")
            return count
    except Exception as e:
        print(f"[STATS] ‚ùå ERROR in get_total_users_count: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return 0


def get_total_credits_given() -> int:
    """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    try:
        print("[STATS] Getting total credits given...")
        with SessionLocal() as db:
            result = db.execute(text("""
                SELECT COALESCE(SUM(delta), 0) 
                FROM credit_log 
                WHERE delta > 0
            """)).scalar()
            
            given = result or 0
            print(f"[STATS] Total credits given: {given}")
            return given
    except Exception as e:
        print(f"[STATS] ‚ùå ERROR in get_total_credits_given: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return 0


def get_total_credits_spent() -> int:
    """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    try:
        print("[STATS] Getting total credits spent...")
        with SessionLocal() as db:
            result = db.execute(text("""
                SELECT COALESCE(SUM(ABS(delta)), 0) 
                FROM credit_log 
                WHERE delta < 0
            """)).scalar()
            
            spent = result or 0
            print(f"[STATS] Total credits spent: {spent}")
            return spent
    except Exception as e:
        print(f"[STATS] ‚ùå ERROR in get_total_credits_spent: {type(e).__name__}: {e}")
        import traceback
        traceback.print_exc()
        return 0


def generate_statistics_report(target_date: Optional[str] = None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    try:
        print("[STATS] Starting statistics report generation...")
        
        if target_date is None:
            target_date = get_moscow_date()
            print(f"[STATS] Using current date: {target_date}")
        else:
            print(f"[STATS] Using provided date: {target_date}")
        
        print("[STATS] Getting Moscow time...")
        current_time = get_moscow_time()
        print(f"[STATS] Current Moscow time: {current_time}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
        print("[STATS] Collecting daily statistics...")
        new_users = get_new_users_count(target_date)
        active_users = get_active_users_count(target_date)
        credits_spent_today = get_credits_spent(target_date)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("[STATS] Collecting total statistics...")
        total_users = get_total_users_count()
        total_credits_given = get_total_credits_given()
        total_credits_spent = get_total_credits_spent()
        
        print("[STATS] Formatting report...")
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>
üïê –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {current_time.strftime('%Y-%m-%d %H:%M:%S')} MSK

üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è ({target_date}):
üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {new_users}
‚ú® –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}
üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {credits_spent_today}

üìà –í—Å–µ–≥–æ –≤ –±–∞–∑–µ:
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üí∞ –í—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {total_credits_given}
üìâ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {total_credits_spent}"""
        
        print(f"[STATS] ‚úÖ Report generated successfully (length: {len(report)} chars)")
        return report
        
    except Exception as e:
        error_msg = f"[STATS] ‚ùå CRITICAL ERROR in generate_statistics_report: {type(e).__name__}: {e}"
        print(error_msg)
        import traceback
        traceback.print_exc()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        current_time = get_moscow_time()
        error_report = f"""‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

üïê –í—Ä–µ–º—è: {current_time.strftime('%Y-%m-%d %H:%M:%S')} MSK
üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}

üìã –î–µ—Ç–∞–ª–∏:
<code>{traceback.format_exc()}</code>"""
        
        return error_report


