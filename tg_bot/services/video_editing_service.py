"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω—Ç–∞–∂–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Shotstack API.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –Ω–∞–¥ video_editing/autopipeline.py
–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–æ–º.
"""
import logging
import os
import re
import subprocess
import sys
import tempfile
import time
from pathlib import Path
from typing import Dict, Optional

import requests

from .r2_service import upload_file, get_presigned_url
from ..utils.timing import log_timing, format_size

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ autopipeline.py
VIDEO_EDITING_DIR = Path(__file__).parent.parent.parent / "video_editing"
AUTOPIPELINE_SCRIPT = VIDEO_EDITING_DIR / "autopipeline.py"


class VideoEditingError(Exception):
    """–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∞–∂–µ –≤–∏–¥–µ–æ"""
    pass


def extract_video_url_from_output(stdout: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ—á—å URL –≤–∏–¥–µ–æ –∏–∑ –≤—ã–≤–æ–¥–∞ autopipeline.
    
    Autopipeline –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Ü–µ:
    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
    - template_name: https://shotstack.io/.../video.mp4
    """
    # –ò—â–µ–º URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "- <name>: <url>"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .+ –≤–º–µ—Å—Ç–æ \w+ —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Ç–æ—á–∫–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    pattern = r'- .+:\s+(https?://[^\s]+\.mp4)'
    match = re.search(pattern, stdout)
    if match:
        return match.group(1)
    return None


def download_video_from_url(url: str, local_path: str) -> bool:
    """
    –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ URL.
    
    Args:
        url: URL –≤–∏–¥–µ–æ
        local_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    Returns:
        bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    try:
        start_time = time.time()
        logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Downloading video from Shotstack")
        
        response = requests.get(url, stream=True, timeout=300)
        response.raise_for_status()
        
        downloaded_bytes = 0
        with open(local_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
                downloaded_bytes += len(chunk)
        
        duration = time.time() - start_time
        logger.info(f"[MONTAGE] ‚è±Ô∏è Downloaded {format_size(downloaded_bytes)} in {duration:.2f}s")
        logger.info(f"[MONTAGE] üìä Download speed: {format_size(int(downloaded_bytes / duration))}/s")
        
        return True
    except Exception as e:
        logger.error(f"[MONTAGE] ‚ùå Failed to download video: {e}")
        return False


async def add_subtitles_to_video(
    video_r2_key: str,
    text: str,
    user_id: int
) -> Dict[str, str]:
    """
    –ù–∞–ª–æ–∂–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –≤–∏–¥–µ–æ (—Ñ–æ—Ä–º–∞—Ç talking_head).
    
    Args:
        video_r2_key: R2 –∫–ª—é—á –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        text: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    
    Returns:
        Dict —Å –∫–ª—é—á–∞–º–∏:
            - r2_key: –∫–ª—é—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ R2
            - url: presigned URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    
    Raises:
        VideoEditingError: –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–Ω—Ç–∞–∂–∞
    """
    overall_start = time.time()
    
    try:
        logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Starting add_subtitles_to_video for user {user_id}")
        logger.info(f"[MONTAGE] üìä Video: {video_r2_key}")
        logger.info(f"[MONTAGE] üìä Transcript length: {len(text)} chars")
        
        # 1. –ü–æ–ª—É—á–∏—Ç—å presigned URL –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        start_time = time.time()
        logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Getting presigned URL from R2")
        head_url = get_presigned_url(video_r2_key, expiry_hours=1)
        if not head_url:
            raise VideoEditingError(f"Failed to get presigned URL for {video_r2_key}")
        logger.info(f"[MONTAGE] ‚è±Ô∏è Got presigned URL in {time.time() - start_time:.2f}s")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ Shotstack credentials
        api_key = os.getenv("SHOTSTACK_API_KEY")
        if not api_key:
            raise VideoEditingError("SHOTSTACK_API_KEY not configured")
        
        stage = os.getenv("SHOTSTACK_STAGE", "v1")
        
        # 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å autopipeline —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ talking_head (no overlay, just subtitles on original video)
        with tempfile.TemporaryDirectory() as tmpdir:
            output_dir = Path(tmpdir) / "output"
            output_dir.mkdir()
            
            cmd = [
                sys.executable,
                str(AUTOPIPELINE_SCRIPT),
                "--background-url", head_url,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º head –∫–∞–∫ —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                "--head-url", head_url,
                "--templates", "basic",  # –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –±–µ–∑ overlay
                "--subtitles-enabled", "auto",
                "--transcript", text,
                "--output-dir", str(output_dir),
                "--rembg-model", "u2net_human_seg",  # –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ª—é–¥–µ–π
            ]
            
            logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Running autopipeline subprocess")
            logger.info(f"[MONTAGE] üìä Command: {' '.join(cmd[:6])}...")  # –ø–µ—Ä–≤—ã–µ 6 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env["SHOTSTACK_API_KEY"] = api_key
            env["SHOTSTACK_STAGE"] = stage
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            env["SHOTSTACK_POLL_SECONDS"] = "3"  # —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∞
            env["U2NET_HOME"] = "/tmp/.u2net"  # –∫—ç—à rembg –º–æ–¥–µ–ª–µ–π
            
            subprocess_start = time.time()
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                env=env,
                cwd=str(VIDEO_EDITING_DIR)
            )
            subprocess_duration = time.time() - subprocess_start
            logger.info(f"[MONTAGE] ‚è±Ô∏è Autopipeline subprocess completed in {subprocess_duration:.2f}s")
            
            if result.returncode != 0:
                logger.error(f"[MONTAGE] ‚ùå Autopipeline failed with exit code {result.returncode}")
                logger.error(f"[MONTAGE] STDERR ({len(result.stderr)} chars): {result.stderr}")
                logger.error(f"[MONTAGE] STDOUT ({len(result.stdout)} chars): {result.stdout}")
                raise VideoEditingError(f"Autopipeline failed (exit code {result.returncode}): {result.stderr[:500]}")
            
            logger.info(f"[MONTAGE] ‚úÖ Autopipeline completed successfully (exit code 0)")
            logger.info(f"[MONTAGE] üìä Output: {len(result.stdout)} chars stdout, {len(result.stderr)} chars stderr")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ stdout –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if result.stdout:
                lines = [l for l in result.stdout.split('\n') if l.strip()]
                logger.info(f"[MONTAGE] Last {min(20, len(lines))} lines of output:")
                for line in lines[-20:]:
                    logger.info(f"[MONTAGE]   {line}")
            
            if result.stderr:
                logger.info(f"[MONTAGE] STDERR output: {result.stderr}")
            
            # 4. –ò–∑–≤–ª–µ—á—å URL –≤–∏–¥–µ–æ –∏–∑ –≤—ã–≤–æ–¥–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ stdout –∏ stderr)
            video_url = extract_video_url_from_output(result.stdout)
            if not video_url and result.stderr:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ stderr (–≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–æ–≥–∏)
                video_url = extract_video_url_from_output(result.stderr)
            
            if not video_url:
                logger.error(f"[MONTAGE] ‚ùå Failed to extract video URL from autopipeline output")
                logger.error(f"[MONTAGE] üìä Stdout ({len(result.stdout)} chars), Stderr ({len(result.stderr)} chars)")
                logger.error(f"[MONTAGE] Last 10 lines of stderr:")
                for line in result.stderr.split('\n')[-10:]:
                    if line.strip():
                        logger.error(f"[MONTAGE]   {line}")
                raise VideoEditingError(f"Failed to extract video URL from autopipeline output (checked {len(result.stdout) + len(result.stderr)} chars total)")
            
            logger.info(f"Extracted video URL: {video_url}")
            
            # 5. –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ
            result_file = Path(tmpdir) / f"subtitled_{user_id}_{int(time.time())}.mp4"
            if not download_video_from_url(video_url, str(result_file)):
                raise VideoEditingError("Failed to download rendered video from Shotstack")
            
            logger.info(f"Downloaded video to: {result_file}")
            
            # 5. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ R2
            start_time = time.time()
            logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Uploading result to R2")
            
            timestamp = int(time.time())
            result_r2_key = f"users/{user_id}/edited_videos/subtitled_{timestamp}.mp4"
            
            file_size = result_file.stat().st_size
            logger.info(f"[MONTAGE] üìä Result file size: {format_size(file_size)}")
            
            upload_success = upload_file(str(result_file), result_r2_key)
            if not upload_success:
                raise VideoEditingError("Failed to upload result to R2")
            
            upload_duration = time.time() - start_time
            logger.info(f"[MONTAGE] ‚è±Ô∏è Uploaded to R2 in {upload_duration:.2f}s")
            logger.info(f"[MONTAGE] üìä Upload speed: {format_size(int(file_size / upload_duration))}/s")
            
            # 6. –ü–æ–ª—É—á–∏—Ç—å presigned URL –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_url = get_presigned_url(result_r2_key, expiry_hours=24)  # 24 —á–∞—Å–∞
            
            overall_duration = time.time() - overall_start
            logger.info(f"[MONTAGE] ‚úÖ Successfully created subtitled video: {result_r2_key}")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            minutes = int(overall_duration // 60)
            seconds = overall_duration % 60
            logger.info(f"[MONTAGE] ‚è±Ô∏è Total add_subtitles_to_video: {overall_duration:.2f}s ({minutes}m {seconds:.1f}s)")
            
            return {
                "r2_key": result_r2_key,
                "url": result_url or ""
            }
            
    except subprocess.CalledProcessError as e:
        logger.error(f"Subprocess error in add_subtitles_to_video: {e}")
        raise VideoEditingError(f"Video processing failed: {e}")
    except Exception as e:
        logger.error(f"Error in add_subtitles_to_video: {e}", exc_info=True)
        raise VideoEditingError(f"Video editing failed: {e}")


async def composite_head_with_background(
    head_r2_key: str,
    background_r2_key: str,
    text: str,
    user_id: int
) -> Dict[str, str]:
    """
    –°–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –≥–æ–≤–æ—Ä—è—â–µ–π –≥–æ–ª–æ–≤–æ–π –Ω–∞ —Ñ–æ–Ω–µ.
    
    Args:
        head_r2_key: R2 –∫–ª—é—á –≤–∏–¥–µ–æ —Å –≥–æ–ª–æ–≤–æ–π
        background_r2_key: R2 –∫–ª—é—á —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
        text: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Dict —Å –∫–ª—é—á–∞–º–∏:
            - r2_key: –∫–ª—é—á —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ R2
            - url: presigned URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    
    Raises:
        VideoEditingError: –ø—Ä–∏ –æ—à–∏–±–∫–µ –º–æ–Ω—Ç–∞–∂–∞
    """
    overall_start = time.time()
    
    try:
        logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Starting composite_head_with_background for user {user_id}")
        logger.info(f"[MONTAGE] üìä Head video: {head_r2_key}")
        logger.info(f"[MONTAGE] üìä Background video: {background_r2_key}")
        logger.info(f"[MONTAGE] üìä Transcript length: {len(text)} chars")
        
        # 1. –ü–æ–ª—É—á–∏—Ç—å presigned URLs
        start_time = time.time()
        logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Getting presigned URLs from R2")
        
        head_url = get_presigned_url(head_r2_key, expiry_hours=1)
        bg_url = get_presigned_url(background_r2_key, expiry_hours=1)
        
        if not head_url or not bg_url:
            raise VideoEditingError("Failed to get presigned URLs")
        
        logger.info(f"[MONTAGE] ‚è±Ô∏è Got presigned URLs in {time.time() - start_time:.2f}s")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Shotstack credentials
        api_key = os.getenv("SHOTSTACK_API_KEY")
        if not api_key:
            raise VideoEditingError("SHOTSTACK_API_KEY not configured")
        
        stage = os.getenv("SHOTSTACK_STAGE", "v1")
        
        # 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å autopipeline —Å mix_basic_circle –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π
        with tempfile.TemporaryDirectory() as tmpdir:
            output_dir = Path(tmpdir) / "output"
            output_dir.mkdir()
            
            cmd = [
                sys.executable,
                str(AUTOPIPELINE_SCRIPT),
                "--background-url", bg_url,
                "--head-url", head_url,
                "--templates", "mix_basic_circle",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º mix_basic_circle —à–∞–±–ª–æ–Ω
                "--subtitles-enabled", "auto",
                "--transcript", text,
                "--output-dir", str(output_dir),
                "--rembg-model", "u2net_human_seg",  # –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ª—é–¥–µ–π
                "--user-id", str(user_id),  # –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è overlay
            ]
            
            logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Running autopipeline subprocess (composite with background)")
            logger.info(f"[MONTAGE] üìä Template: mix_basic_circle")
            logger.info(f"[MONTAGE] üìä Command: {' '.join(cmd[:6])}...")
            
            env = os.environ.copy()
            env["SHOTSTACK_API_KEY"] = api_key
            env["SHOTSTACK_STAGE"] = stage
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            env["SHOTSTACK_POLL_SECONDS"] = "3"  # —á–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–Ω–¥–µ—Ä–∞
            env["U2NET_HOME"] = "/tmp/.u2net"  # –∫—ç—à rembg –º–æ–¥–µ–ª–µ–π
            
            subprocess_start = time.time()
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                env=env,
                cwd=str(VIDEO_EDITING_DIR)
            )
            subprocess_duration = time.time() - subprocess_start
            logger.info(f"[MONTAGE] ‚è±Ô∏è Autopipeline subprocess completed in {subprocess_duration:.2f}s")
            
            if result.returncode != 0:
                logger.error(f"[MONTAGE] ‚ùå Autopipeline failed with exit code {result.returncode}")
                logger.error(f"[MONTAGE] STDERR ({len(result.stderr)} chars): {result.stderr}")
                logger.error(f"[MONTAGE] STDOUT ({len(result.stdout)} chars): {result.stdout}")
                raise VideoEditingError(f"Autopipeline failed (exit code {result.returncode}): {result.stderr[:500]}")
            
            logger.info(f"[MONTAGE] ‚úÖ Autopipeline completed successfully (exit code 0)")
            logger.info(f"[MONTAGE] üìä Output: {len(result.stdout)} chars stdout, {len(result.stderr)} chars stderr")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ stdout –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if result.stdout:
                lines = [l for l in result.stdout.split('\n') if l.strip()]
                logger.info(f"[MONTAGE] Last {min(20, len(lines))} lines of output:")
                for line in lines[-20:]:
                    logger.info(f"[MONTAGE]   {line}")
            
            if result.stderr:
                logger.info(f"[MONTAGE] STDERR output: {result.stderr}")
            
            # 4. –ò–∑–≤–ª–µ—á—å URL –≤–∏–¥–µ–æ –∏–∑ –≤—ã–≤–æ–¥–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ stdout –∏ stderr)
            video_url = extract_video_url_from_output(result.stdout)
            if not video_url and result.stderr:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ stderr (–≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–æ–≥–∏)
                video_url = extract_video_url_from_output(result.stderr)
            
            if not video_url:
                logger.error(f"[MONTAGE] ‚ùå Failed to extract video URL from autopipeline output")
                logger.error(f"[MONTAGE] üìä Stdout ({len(result.stdout)} chars), Stderr ({len(result.stderr)} chars)")
                logger.error(f"[MONTAGE] Last 10 lines of stderr:")
                for line in result.stderr.split('\n')[-10:]:
                    if line.strip():
                        logger.error(f"[MONTAGE]   {line}")
                raise VideoEditingError(f"Failed to extract video URL from autopipeline output (checked {len(result.stdout) + len(result.stderr)} chars total)")
            
            logger.info(f"Extracted video URL: {video_url}")
            
            # Cache overlay URLs for future iterations
            # Extract overlay URLs from autopipeline stderr (they are logged there)
            overlay_cache = {}
            r2_cache = {}
            
            for line in result.stderr.split('\n'):
                if '[AUTOPIPELINE] Generated overlay' in line:
                    # Parse: "[AUTOPIPELINE] Generated overlay circle: https://..."
                    try:
                        parts = line.split('Generated overlay')[1].strip()
                        shape, url = parts.split(':', 1)
                        shape = shape.strip()
                        url = url.strip()
                        overlay_cache[shape] = url
                        
                        # Extract R2 key from Shotstack asset URL if possible
                        # Format: https://api.shotstack.io/stage/assets/ASSET_ID/...
                        if 'shotstack.io' in url:
                            r2_key = f"overlays/{user_id}/{shape}_{int(time.time())}.mov"
                            r2_cache[shape] = r2_key
                    except Exception as e:
                        logger.warning(f"[MONTAGE] Failed to parse overlay URL from log: {e}")
            
            if overlay_cache:
                logger.info(f"[MONTAGE] Caching {len(overlay_cache)} overlay URLs for user {user_id}")
                from tg_bot.utils.user_state import set_cached_overlay_urls
                set_cached_overlay_urls(user_id, overlay_cache, r2_cache)
            
            # 5. –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ
            result_file = Path(tmpdir) / f"composite_{user_id}_{int(time.time())}.mp4"
            if not download_video_from_url(video_url, str(result_file)):
                raise VideoEditingError("Failed to download rendered video from Shotstack")
            
            logger.info(f"Downloaded video to: {result_file}")
            
            # 5. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ R2
            start_time = time.time()
            logger.info(f"[MONTAGE] ‚ñ∂Ô∏è Uploading result to R2")
            
            timestamp = int(time.time())
            result_r2_key = f"users/{user_id}/edited_videos/composite_{timestamp}.mp4"
            
            file_size = result_file.stat().st_size
            logger.info(f"[MONTAGE] üìä Result file size: {format_size(file_size)}")
            
            upload_success = upload_file(str(result_file), result_r2_key)
            if not upload_success:
                raise VideoEditingError("Failed to upload result to R2")
            
            upload_duration = time.time() - start_time
            logger.info(f"[MONTAGE] ‚è±Ô∏è Uploaded to R2 in {upload_duration:.2f}s")
            logger.info(f"[MONTAGE] üìä Upload speed: {format_size(int(file_size / upload_duration))}/s")
            
            # 6. –ü–æ–ª—É—á–∏—Ç—å presigned URL
            result_url = get_presigned_url(result_r2_key, expiry_hours=24)
            
            overall_duration = time.time() - overall_start
            logger.info(f"[MONTAGE] ‚úÖ Successfully created composite video: {result_r2_key}")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            minutes = int(overall_duration // 60)
            seconds = overall_duration % 60
            logger.info(f"[MONTAGE] ‚è±Ô∏è Total composite_head_with_background: {overall_duration:.2f}s ({minutes}m {seconds:.1f}s)")
            
            return {
                "r2_key": result_r2_key,
                "url": result_url or ""
            }
            
    except subprocess.CalledProcessError as e:
        logger.error(f"Subprocess error in composite_head_with_background: {e}")
        raise VideoEditingError(f"Video processing failed: {e}")
    except Exception as e:
        logger.error(f"Error in composite_head_with_background: {e}", exc_info=True)
        raise VideoEditingError(f"Video editing failed: {e}")

