# main.py ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞
import asyncio, os, pathlib
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from tg_bot.db import engine
from tg_bot.models import Base
from tg_bot.utils.credits import ensure_user, get_credits, spend_credits
from tg_bot.keyboards import (
    main_menu, 
    ugc_start_menu, 
    character_choice_menu, 
    back_to_main_menu
)
from tg_bot.states import UGCCreation
from tg_bot.services.elevenlabs_service import tts_to_file, DEFAULT_VOICES
from tg_bot.services.vertex_service import generate_video_veo3
from tg_bot.utils.files import list_start_frames
from tg_bot.utils.user_state import (
    set_selected_character,
    get_selected_character,
    set_character_text,
    get_character_text,
    set_situation_prompt,
    get_situation_prompt,
    get_selected_voice,
    set_selected_voice,
)
from tg_bot.utils.voices import list_voice_samples

load_dotenv()

# Check for required environment variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    print("=" * 80)
    print("‚ùå ERROR: TELEGRAM_BOT_TOKEN not found in environment variables!")
    print("=" * 80)
    print("")
    print("Please set the following environment variable in Railway:")
    print("")
    print("  TELEGRAM_BOT_TOKEN=your_bot_token_here")
    print("")
    print("Get your token from: https://t.me/BotFather")
    print("")
    print("See ENV_VARIABLES.md for full list of required variables.")
    print("=" * 80)
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

print(f"‚úÖ Bot token found: {TELEGRAM_BOT_TOKEN[:10]}...")

base_dir_env = os.getenv("BASE_DIR")
if base_dir_env is None:
    print("‚ö†Ô∏è  Warning: BASE_DIR is not set in environment. Using current directory as BASE_DIR.")
    BASE_DIR = pathlib.Path(".")
else:
    BASE_DIR = pathlib.Path(base_dir_env)
    print(f"‚úÖ BASE_DIR: {BASE_DIR}")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –í—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∞—É–¥–∏–æ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î

@dp.startup()
async def on_startup():
    # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
    print("üîß Creating database tables if they don't exist...")
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Database tables created/verified successfully")
        
        # Show table names
        from sqlalchemy import inspect
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        print(f"üìä Available tables: {', '.join(tables) if tables else 'none yet'}")
    except Exception as e:
        print(f"‚ùå Error creating database tables: {e}")
        raise

@dp.message(CommandStart())
async def cmd_start(m: Message):
    ensure_user(m.from_user.id)
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ GenAI UGC Ads –±–æ—Ç.\n–£ —Ç–µ–±—è 100 —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤. –ß—Ç–æ –¥–µ–ª–∞–µ–º?",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "credits")
async def show_credits(c: CallbackQuery):
    cts = get_credits(c.from_user.id)
    await c.message.answer(f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å {cts} –∫—Ä–µ–¥–∏—Ç–æ–≤.", reply_markup=main_menu())
    await c.answer()

# --- FAQ ---
@dp.callback_query(F.data == "faq")
async def show_faq(c: CallbackQuery):
    faq_text = """
‚ùì <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>

1Ô∏è‚É£ <b>–°–æ–∑–¥–∞—Ç—å UGC —Ä–µ–∫–ª–∞–º—É</b>
   ‚Ä¢ –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   ‚Ä¢ –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
   ‚Ä¢ –û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –≤–∏–¥–µ–æ
   ‚Ä¢ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ!

2Ô∏è‚É£ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>
   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ: 1 –∫—Ä–µ–¥–∏—Ç
   ‚Ä¢ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: 100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤

3Ô∏è‚É£ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏</b>
   ‚Ä¢ –í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é Google Veo3
   ‚Ä¢ –ì–æ–ª–æ—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ElevenLabs
   ‚Ä¢ –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)
   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 4-8 —Å–µ–∫—É–Ω–¥

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
"""
    await c.message.answer(faq_text, parse_mode="HTML", reply_markup=back_to_main_menu())
    await c.answer()

# --- UGC Creation Flow ---
@dp.callback_query(F.data == "create_ugc")
async def start_ugc_creation(c: CallbackQuery):
    await c.message.edit_text(
        "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=ugc_start_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "create_character")
async def create_character(c: CallbackQuery):
    await c.message.answer(
        "‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è! üöÄ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.",
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "select_character")
async def select_character(c: CallbackQuery):
    frames = list_start_frames()[:5]
    if not frames:
        await c.message.answer(
            "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=back_to_main_menu()
        )
        return await c.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    for idx, frame in enumerate(frames):
        await c.message.answer_photo(
            FSInputFile(frame),
            caption=f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂ #{idx+1}"
        )
    
    await c.message.answer(
        "–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ —Ç–≤–æ–µ–π —Ä–µ–∫–ª–∞–º–µ:",
        reply_markup=character_choice_menu(len(frames))
    )
    await c.answer()

@dp.callback_query(F.data.startswith("char_pick:"))
async def character_picked(c: CallbackQuery, state: FSMContext):
    idx = int(c.data.split(":", 1)[1])
    frames = list_start_frames()[:5]
    
    if idx < 0 or idx >= len(frames):
        await c.message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return await c.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    set_selected_character(c.from_user.id, idx)
    print(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ #{idx+1}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    await c.message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ #{idx+1}\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 20%!'",
        reply_markup=back_to_main_menu()
    )
    
    await state.set_state(UGCCreation.waiting_character_text)
    await c.answer()

@dp.message(UGCCreation.waiting_character_text)
async def character_text_received(m: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    set_character_text(m.from_user.id, m.text)
    print(f"User {m.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {m.text[:50]}...")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏
    await m.answer(
        "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        "üé¨ –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –≤–∏–¥–µ–æ (–ø—Ä–æ–º–ø—Ç).\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–æ–∏—Ç –Ω–∞ —Ñ–æ–Ω–µ –º–∞–≥–∞–∑–∏–Ω–∞, —É–ª—ã–±–∞–µ—Ç—Å—è –∏ –º–∞—à–µ—Ç —Ä—É–∫–æ–π, —è—Ä–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ'\n\n"
        "–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.",
        reply_markup=back_to_main_menu()
    )
    
    await state.set_state(UGCCreation.waiting_situation_prompt)

@dp.message(UGCCreation.waiting_situation_prompt)
async def situation_prompt_received(m: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    set_situation_prompt(m.from_user.id, m.text)
    print(f"User {m.from_user.id} –≤–≤–µ–ª –ø—Ä–æ–º–ø—Ç: {m.text[:50]}...")
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç
    ok = spend_credits(m.from_user.id, 1, "ugc_video_creation")
    if not ok:
        await m.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–Ω—É–∂–µ–Ω 1 –∫—Ä–µ–¥–∏—Ç).\n\n"
            "–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    try:
        await m.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã...\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        character_idx = get_selected_character(m.from_user.id)
        character_text = get_character_text(m.from_user.id)
        situation_prompt = get_situation_prompt(m.from_user.id)
        
        frames = list_start_frames()[:5]
        selected_frame = frames[character_idx] if character_idx is not None and character_idx < len(frames) else None
        
        if not selected_frame:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–¥—Ä")
        
        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        await m.answer("üé§ –®–∞–≥ 1/3: –°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å
        samples = list_voice_samples()
        if not samples:
            raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤")
        
        voice_id = samples[0][1]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å
        audio_path = await tts_to_file(character_text, voice_id)
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Veo3
        await m.answer("üé¨ –®–∞–≥ 2/3: –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã)")
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç: –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ + —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂
        full_prompt = f"{situation_prompt}. –ü–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ–≤–æ—Ä–∏—Ç: '{character_text}'"
        
        video_path = await generate_video_veo3(
            prompt=full_prompt,
            duration_seconds=6,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            aspect_ratio="9:16"
        )
        
        if video_path:
            await m.answer("‚úÖ –®–∞–≥ 3/3: –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
            await m.answer_video(
                FSInputFile(video_path), 
                caption="üéâ –¢–≤–æ—è UGC —Ä–µ–∫–ª–∞–º–∞ –≥–æ—Ç–æ–≤–∞!\n\n(-1 –∫—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω)"
            )
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                os.remove(audio_path)
                os.remove(video_path)
                print(f"Cleaned up files: {audio_path}, {video_path}")
            except Exception as cleanup_error:
                print(f"Failed to cleanup files: {cleanup_error}")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ")
            
        await m.answer(
            "–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Ä–µ–∫–ª–∞–º—É?",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        from tg_bot.utils.credits import add_credits
        add_credits(m.from_user.id, 1, "refund_ugc_fail")
        print(f"UGC Creation Error for user {m.from_user.id}: {e}")
        await m.answer(
            "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.\n\n"
            "–ö—Ä–µ–¥–∏—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=main_menu()
        )
    finally:
        await state.clear()

# --- Navigation ---
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    await state.clear()
    await c.answer()

@dp.callback_query(F.data == "back_to_ugc")
async def back_to_ugc(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text(
        "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=ugc_start_menu()
    )
    await state.clear()
    await c.answer()

async def main():
    # Detect if running in Railway/production (has PORT env var) or locally
    port = os.getenv("PORT")
    railway_public_domain = os.getenv("RAILWAY_PUBLIC_DOMAIN")
    
    if port and railway_public_domain:
        # Railway/Production mode: use webhook
        from aiohttp import web
        
        # Construct webhook URL from Railway public domain
        webhook_url = f"https://{railway_public_domain}/webhook"
        print(f"Setting webhook to: {webhook_url}")
        
        try:
            await bot.set_webhook(webhook_url, drop_pending_updates=True)
            print("Webhook set successfully!")
        except Exception as e:
            print(f"Failed to set webhook: {e}")
        
        # Create aiohttp app
        app = web.Application()
        
        # Register dispatcher webhook handler
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
        SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
        
        # Add health check endpoint
        async def health(request):
            return web.Response(text="OK")
        app.router.add_get("/health", health)
        app.router.add_get("/", health)
        
        setup_application(app, dp, bot=bot)
        
        # Run web server
        port_num = int(port)
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, host="0.0.0.0", port=port_num)
        print(f"Starting webhook server on port {port_num}")
        await site.start()
        
        # Keep running
        await asyncio.Event().wait()
    else:
        # Local mode: use polling
        print("Starting in polling mode (local development)")
        await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
