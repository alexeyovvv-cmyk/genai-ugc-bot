# main.py ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞
import asyncio, os, pathlib
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, InputMediaAudio
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from tg_bot.db import engine
from tg_bot.models import Base
from tg_bot.utils.credits import ensure_user, get_credits, spend_credits
from tg_bot.utils.constants import DEFAULT_CREDITS, COST_UGC_VIDEO
from tg_bot.keyboards import (
    main_menu, 
    ugc_start_menu, 
    character_choice_menu, 
    back_to_main_menu,
    voice_choice_menu,
    voice_gallery_menu,
    audio_confirmation_menu,
    text_change_decision_menu,
    settings_menu,
    voice_settings_menu,
    bottom_navigation_menu,
    gender_selection_menu,
    age_selection_menu,
    character_gallery_menu,
    character_selection_menu,
    credits_menu,
)
from tg_bot.states import UGCCreation
from tg_bot.services.falai_service import generate_talking_head_video
from tg_bot.services.elevenlabs_service import tts_to_file
from tg_bot.utils.files import (
    list_character_images, 
    get_character_image,
    get_available_genders,
    get_available_ages
)
from tg_bot.utils.voices import list_voice_samples, get_voice_sample, list_all_voice_samples
from tg_bot.utils.audio import check_audio_duration_limit
from tg_bot.utils.user_state import (
    set_selected_character,
    get_selected_character,
    set_character_text,
    get_character_text,
    set_selected_voice,
    get_selected_voice,
    set_last_audio,
    get_last_audio,
)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
def set_character_gender(tg_id: int, gender: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    from sqlalchemy import text
    with engine.connect() as conn:
        # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ user_state —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        conn.execute(text("""
            INSERT INTO user_state (user_id) 
            SELECT id FROM users WHERE tg_id = :tg_id
            ON CONFLICT (user_id) DO NOTHING
        """), {"tg_id": tg_id})
        
        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º
        conn.execute(text("""
            UPDATE user_state 
            SET character_gender = :gender 
            WHERE user_id = (SELECT id FROM users WHERE tg_id = :tg_id)
        """), {"gender": gender, "tg_id": tg_id})
        conn.commit()

def get_character_gender(tg_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    from sqlalchemy import text
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT character_gender FROM user_state 
            WHERE user_id = (SELECT id FROM users WHERE tg_id = :tg_id)
        """), {"tg_id": tg_id}).fetchone()
        return result[0] if result and result[0] else None

def set_character_age(tg_id: int, age: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    from sqlalchemy import text
    with engine.connect() as conn:
        # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ user_state —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        conn.execute(text("""
            INSERT INTO user_state (user_id) 
            SELECT id FROM users WHERE tg_id = :tg_id
            ON CONFLICT (user_id) DO NOTHING
        """), {"tg_id": tg_id})
        
        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º
        conn.execute(text("""
            UPDATE user_state 
            SET character_age = :age 
            WHERE user_id = (SELECT id FROM users WHERE tg_id = :tg_id)
        """), {"age": age, "tg_id": tg_id})
        conn.commit()

def get_character_age(tg_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    from sqlalchemy import text
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT character_age FROM user_state 
            WHERE user_id = (SELECT id FROM users WHERE tg_id = :tg_id)
        """), {"tg_id": tg_id}).fetchone()
        return result[0] if result and result[0] else None

def set_character_page(tg_id: int, page: int):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    from sqlalchemy import text
    with engine.connect() as conn:
        # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ user_state —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        conn.execute(text("""
            INSERT INTO user_state (user_id) 
            SELECT id FROM users WHERE tg_id = :tg_id
            ON CONFLICT (user_id) DO NOTHING
        """), {"tg_id": tg_id})
        
        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º
        conn.execute(text("""
            UPDATE user_state 
            SET character_page = :page 
            WHERE user_id = (SELECT id FROM users WHERE tg_id = :tg_id)
        """), {"page": page, "tg_id": tg_id})
        conn.commit()

def get_character_page(tg_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    from sqlalchemy import text
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT character_page FROM user_state 
            WHERE user_id = (SELECT id FROM users WHERE tg_id = :tg_id)
        """), {"tg_id": tg_id}).fetchone()
        return result[0] if result and result[0] is not None else 0

def set_voice_page(tg_id: int, page: int):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤"""
    from sqlalchemy import text
    with engine.connect() as conn:
        # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –≤ user_state —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        conn.execute(text("""
            INSERT INTO user_state (user_id) 
            SELECT id FROM users WHERE tg_id = :tg_id
            ON CONFLICT (user_id) DO NOTHING
        """), {"tg_id": tg_id})
        
        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º
        conn.execute(text("""
            UPDATE user_state 
            SET voice_page = :page 
            WHERE user_id = (SELECT id FROM users WHERE tg_id = :tg_id)
        """), {"page": page, "tg_id": tg_id})
        conn.commit()

def get_voice_page(tg_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤"""
    from sqlalchemy import text
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT voice_page FROM user_state 
            WHERE user_id = (SELECT id FROM users WHERE tg_id = :tg_id)
        """), {"tg_id": tg_id}).fetchone()
        return result[0] if result and result[0] is not None else 0

load_dotenv()

# Check for required environment variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    print("=" * 80)
    print("‚ùå ERROR: TELEGRAM_BOT_TOKEN not found in environment variables!")
    print("=" * 80)
    print("")
    print("Please set the following environment variable in Railway:")
    print("")
    print("  TELEGRAM_BOT_TOKEN=your_bot_token_here")
    print("")
    print("Get your token from: https://t.me/BotFather")
    print("")
    print("See ENV_VARIABLES.md for full list of required variables.")
    print("=" * 80)
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

print(f"‚úÖ Bot token found: {TELEGRAM_BOT_TOKEN[:10]}...")

base_dir_env = os.getenv("BASE_DIR")
if base_dir_env is None:
    print("‚ö†Ô∏è  Warning: BASE_DIR is not set in environment. Using current directory as BASE_DIR.")
    BASE_DIR = pathlib.Path(".")
else:
    BASE_DIR = pathlib.Path(base_dir_env)
    print(f"‚úÖ BASE_DIR: {BASE_DIR}")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
try:
    from tg_bot.admin import setup_admin
    setup_admin(dp)
    print("‚úÖ Admin module initialized")
except Exception as e:
    print(f"‚ö†Ô∏è  Admin module not initialized: {e}")

# –í—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∞—É–¥–∏–æ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î

@dp.startup()
async def on_startup():
    # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
    print("üîß Creating database tables if they don't exist...")
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Database tables created/verified successfully")
        
        # Run migration to add new columns if they don't exist
        print("üîÑ Running migrations for new columns...")
        from sqlalchemy import text
        with engine.connect() as conn:
            try:
                # Try to add new columns (will be skipped if already exist)
                migration_sql = """
                ALTER TABLE user_state 
                ADD COLUMN IF NOT EXISTS selected_character_idx INTEGER,
                ADD COLUMN IF NOT EXISTS character_text VARCHAR,
                ADD COLUMN IF NOT EXISTS character_gender VARCHAR,
                ADD COLUMN IF NOT EXISTS character_age VARCHAR,
                ADD COLUMN IF NOT EXISTS character_page INTEGER DEFAULT 0,
                ADD COLUMN IF NOT EXISTS selected_voice_idx INTEGER,
                ADD COLUMN IF NOT EXISTS voice_page INTEGER DEFAULT 0;
                """
                conn.execute(text(migration_sql))
                conn.commit()
                print("‚úÖ Migrations completed successfully")
            except Exception as migration_error:
                print(f"‚ö†Ô∏è  Migration warning: {migration_error}")
                # Continue anyway - tables might already be up to date
        
        # Show table names
        from sqlalchemy import inspect
        inspector = inspect(engine)
        tables = inspector.get_table_names()
        print(f"üìä Available tables: {', '.join(tables) if tables else 'none yet'}")
        
        # Show database stats
        from sqlalchemy import select
        from tg_bot.db import SessionLocal
        from tg_bot.models import User, CreditLog
        with SessionLocal() as db:
            user_count = len(db.execute(select(User)).scalars().all())
            credit_log_count = len(db.execute(select(CreditLog)).scalars().all())
            print(f"[STARTUP] üë• Users in database: {user_count}")
            print(f"[STARTUP] üìä Credit operations logged: {credit_log_count}")
            
            if user_count > 0:
                print(f"[STARTUP] ‚úÖ Database has {user_count} existing users - data persisted!")
                # Show user credits
                users = db.execute(select(User)).scalars().all()
                for user in users[:5]:  # Show first 5 users
                    print(f"[STARTUP]   User {user.tg_id}: {user.credits} credits")
            else:
                print(f"[STARTUP] ‚ö†Ô∏è  Database is empty - first start or data was lost")
                
        # Show Telegram webhook status
        try:
            info = await bot.get_webhook_info()
            print(f"üåê Webhook info: url={info.url or 'None'}, has_custom_certificate={info.has_custom_certificate}, pending_update_count={info.pending_update_count}")
        except Exception as wh_err:
            print(f"‚ö†Ô∏è  Could not fetch webhook info: {wh_err}")

    except Exception as e:
        print(f"‚ùå Error creating database tables: {e}")
        raise

@dp.message(CommandStart())
async def cmd_start(m: Message):
    ensure_user(m.from_user.id)
    current_credits = get_credits(m.from_user.id)
    await m.answer(
        "üé¨ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GenAI UGC Ads!</b>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: <b>{current_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "credits")
async def show_credits(c: CallbackQuery):
    from sqlalchemy import select
    from tg_bot.db import SessionLocal
    from tg_bot.models import User, CreditLog
    
    cts = get_credits(c.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
    with SessionLocal() as db:
        user = db.scalar(select(User).where(User.tg_id == c.from_user.id))
        if user:
            logs = db.execute(
                select(CreditLog)
                .where(CreditLog.user_id == user.id)
                .order_by(CreditLog.created_at.desc())
                .limit(5)
            ).scalars().all()
        else:
            logs = []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    history_text = ""
    if logs:
        history_text = "\n\nüìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
        for log in logs:
            sign = "+" if log.delta > 0 else ""
            emoji = "üìà" if log.delta > 0 else "üìâ"
            reason_map = {
                "signup_bonus": "–ë–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                "ugc_video_creation": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UGC –≤–∏–¥–µ–æ",
                "refund_ugc_fail": "–í–æ–∑–≤—Ä–∞—Ç (–æ—à–∏–±–∫–∞)",
                "admin_add": "–ù–∞—á–∏—Å–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            }
            reason_text = reason_map.get(log.reason, log.reason)
            history_text += f"{emoji} {sign}{log.delta} ‚Äî {reason_text}\n"
    
    await c.message.answer(
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
        f"–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å: <b>{cts} –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
        f"üí° <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n"
        f"‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UGC –≤–∏–¥–µ–æ: {COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç"
        f"{history_text}",
        parse_mode="HTML",
        reply_markup=credits_menu()
    )
    await c.answer()

# --- FAQ ---
@dp.callback_query(F.data == "faq")
async def show_faq(c: CallbackQuery):
    faq_text = f"""
‚ùì <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>

1Ô∏è‚É£ <b>–°–æ–∑–¥–∞—Ç—å UGC —Ä–µ–∫–ª–∞–º—É</b>
   ‚Ä¢ –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
   ‚Ä¢ –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂
   ‚Ä¢ –û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è –≤–∏–¥–µ–æ
   ‚Ä¢ –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å –≥–æ–≤–æ—Ä—è—â–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º!

2Ô∏è‚É£ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>
   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ: {COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç
   ‚Ä¢ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {DEFAULT_CREDITS} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤

3Ô∏è‚É£ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏</b>
   ‚Ä¢ –í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é Google Veo3
   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂ "–≥–æ–≤–æ—Ä–∏—Ç" —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ
   ‚Ä¢ –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)
   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 6 —Å–µ–∫—É–Ω–¥

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
"""
    await c.message.answer(faq_text, parse_mode="HTML", reply_markup=back_to_main_menu())
    await c.answer()

# --- UGC Creation Flow ---
@dp.callback_query(F.data == "create_ugc")
async def start_ugc_creation(c: CallbackQuery):
    await c.message.edit_text(
        "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=ugc_start_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "create_character")
async def create_character(c: CallbackQuery):
    await c.message.answer(
        "‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è! üöÄ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.",
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "select_character")
async def select_character(c: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –ø–æ–ª–∞"""
    await c.message.edit_text(
        "üë§ <b>–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=gender_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_gender_selection)
    await c.answer()

# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---

@dp.callback_query(F.data == "gender_male")
async def gender_male_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º—É–∂—Å–∫–æ–π –ø–æ–ª"""
    set_character_gender(c.from_user.id, "male")
    print(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: –º—É–∂—Å–∫–æ–π")
    
    await c.message.edit_text(
        "üë® <b>–ú—É–∂—Å–∫–æ–π –ø–æ–ª –≤—ã–±—Ä–∞–Ω</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=age_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_age_selection)
    await c.answer()

@dp.callback_query(F.data == "gender_female")
async def gender_female_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∂–µ–Ω—Å–∫–∏–π –ø–æ–ª"""
    set_character_gender(c.from_user.id, "female")
    print(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –ø–æ–ª: –∂–µ–Ω—Å–∫–∏–π")
    
    await c.message.edit_text(
        "üë© <b>–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª –≤—ã–±—Ä–∞–Ω</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=age_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_age_selection)
    await c.answer()

@dp.callback_query(F.data == "age_young")
async def age_young_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–ª–æ–¥–æ–π –≤–æ–∑—Ä–∞—Å—Ç"""
    set_character_age(c.from_user.id, "young")
    set_character_page(c.from_user.id, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    print(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç: –º–æ–ª–æ–¥–æ–π")
    
    await show_character_gallery(c, state)

## adult –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞

@dp.callback_query(F.data == "age_elderly")
async def age_elderly_selected(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–∂–∏–ª–æ–π –≤–æ–∑—Ä–∞—Å—Ç"""
    set_character_age(c.from_user.id, "elderly")
    set_character_page(c.from_user.id, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    print(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç: –ø–æ–∂–∏–ª–æ–π")
    
    await show_character_gallery(c, state)

async def show_character_gallery(c: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    page = get_character_page(c.from_user.id)
    
    if not gender or not age:
        await c.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=back_to_main_menu()
        )
        return await c.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    images, has_next = list_character_images(gender, age, page, limit=5)
    
    if not images:
        await c.message.edit_text(
            f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</b>\n\n"
            f"–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–æ–ª: {gender}, –≤–æ–∑—Ä–∞—Å—Ç: {age}) "
            f"–ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
            parse_mode="HTML",
            reply_markup=character_gallery_menu(page, has_next, len(images))
        )
        return await c.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º (–¥–æ 5 –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ)
    media = []
    for idx, image_path in enumerate(images):
        global_index = page * 5 + idx
        caption = f"üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂ #{global_index+1}" if idx == 0 else None
        media.append(
            InputMediaPhoto(
                media=FSInputFile(image_path),
                caption=caption
            )
        )
    await c.message.answer_media_group(media)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await c.message.answer(
        f"üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ ({gender}, {age})</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}. –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=character_gallery_menu(page, has_next, len(images))
    )
    
    await state.set_state(UGCCreation.waiting_character_gallery)
    await c.answer()

async def show_voice_gallery(c: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    page = get_voice_page(c.from_user.id)
    
    if not gender or not age:
        await c.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=back_to_main_menu()
        )
        return await c.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    voices, has_next = list_voice_samples(gender, age, page, limit=5)
    
    if not voices:
        await c.message.edit_text(
            f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤</b>\n\n"
            f"–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø–æ–ª: {gender}, –≤–æ–∑—Ä–∞—Å—Ç: {age}) "
            f"–≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            parse_mode="HTML",
            reply_markup=voice_gallery_menu(page, has_next, len(voices))
        )
        return await c.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ-—Å—ç–º–ø–ª—ã –≥–æ–ª–æ—Å–æ–≤ –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º (–¥–æ 5 –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ)
    media = []
    for idx, (name, voice_id, audio_path) in enumerate(voices):
        global_index = page * 5 + idx
        caption = f"üé§ –ì–æ–ª–æ—Å #{global_index+1}: {name}" if idx == 0 else None
        media.append(
            InputMediaAudio(
                media=FSInputFile(audio_path),
                caption=caption
            )
        )
    await c.message.answer_media_group(media)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await c.message.answer(
        f"üé§ <b>–ì–æ–ª–æ—Å–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ({gender}, {age})</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}. –í—ã–±–µ—Ä–∏ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
        parse_mode="HTML",
        reply_markup=voice_gallery_menu(page, has_next, len(voices))
    )
    
    await state.set_state(UGCCreation.waiting_voice_gallery)
    await c.answer()

@dp.callback_query(F.data.startswith("char_page:"))
async def character_page_changed(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    page = int(c.data.split(":", 1)[1])
    set_character_page(c.from_user.id, page)
    print(f"User {c.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
    
    await show_character_gallery(c, state)

@dp.callback_query(F.data.startswith("voice_page:"))
async def voice_page_changed(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤"""
    page = int(c.data.split(":", 1)[1])
    set_voice_page(c.from_user.id, page)
    print(f"User {c.from_user.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤ {page}")
    
    await show_voice_gallery(c, state)

@dp.callback_query(F.data == "back_to_character_gallery")
async def back_to_character_gallery(c: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–∞–ª–µ—Ä–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –≥–æ–ª–æ—Å–æ–≤"""
    await show_character_gallery(c, state)

@dp.callback_query(F.data == "change_character_params")
async def change_character_params(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    await c.message.edit_text(
        "üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=gender_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_gender_selection)
    await c.answer()

@dp.callback_query(F.data == "back_to_gender")
async def back_to_gender(c: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
    await c.message.edit_text(
        "üë§ <b>–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=gender_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_gender_selection)
    await c.answer()

@dp.callback_query(F.data == "back_to_age")
async def back_to_age(c: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    gender = get_character_gender(c.from_user.id)
    gender_text = "üë® –ú—É–∂—Å–∫–æ–π" if gender == "male" else "üë© –ñ–µ–Ω—Å–∫–∏–π"
    
    await c.message.edit_text(
        f"üë§ <b>–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        f"–ü–æ–ª: {gender_text}\n"
        f"–í—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
        parse_mode="HTML",
        reply_markup=age_selection_menu()
    )
    await state.set_state(UGCCreation.waiting_age_selection)
    await c.answer()

@dp.callback_query(F.data.startswith("char_pick:"))
async def character_picked(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    idx = int(c.data.split(":", 1)[1])
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_image = get_character_image(gender, age, idx)
    
    if not character_image:
        await c.message.answer("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ.")
        return await c.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
    set_selected_character(c.from_user.id, idx)
    set_voice_page(c.from_user.id, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤
    print(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ #{idx+1} ({gender}, {age})")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    await show_voice_gallery(c, state)

@dp.callback_query(F.data.startswith("voice_pick:"))
async def voice_picked(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–ª–æ—Å"""
    idx = int(c.data.split(":", 1)[1])
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    
    if not gender or not age:
        await c.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=back_to_main_menu()
        )
        return await c.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å —É—á–µ—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    voice_data = get_voice_sample(gender, age, idx)
    
    if not voice_data:
        await c.message.answer("‚ùå –ì–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.")
        return await c.answer()
    
    name, voice_id, sample_path = voice_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å)
    set_selected_voice(c.from_user.id, voice_id)
    print(f"User {c.from_user.id} –≤—ã–±—Ä–∞–ª –≥–æ–ª–æ—Å #{idx+1}: {name} ({voice_id})")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞
    await c.message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å #{idx+1}: {name}\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º, —á—Ç–æ–±—ã –æ–∑–≤—É—á–∫–∞ –∑–∞–Ω—è–ª–∞ –Ω–µ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥!\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 20%!'",
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    
    await state.set_state(UGCCreation.waiting_character_text)
    await c.answer()

@dp.callback_query(F.data == "audio_confirmed")
async def audio_confirmed(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞—É–¥–∏–æ, —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ"""
    import sys
    
    def log(msg):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º flush"""
        print(msg, flush=True)
        sys.stdout.flush()
    
    log(f"[UGC] User {c.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∞—É–¥–∏–æ, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
    credits = get_credits(c.from_user.id)
    if credits < COST_UGC_VIDEO:
        log(f"[UGC] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ —É user {c.from_user.id}")
        await c.message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–Ω—É–∂–Ω–æ {COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç).\n\n"
            "–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç
    ok = spend_credits(c.from_user.id, COST_UGC_VIDEO, "ugc_video_creation")
    if not ok:
        log(f"[UGC] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –∫—Ä–µ–¥–∏—Ç —É user {c.from_user.id}")
        await c.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞.\n\n"
            "–°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    log(f"[UGC] –ö—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    try:
        await c.message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã...\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        log(f"[UGC] –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        log(f"[UGC] –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        character_idx = get_selected_character(c.from_user.id)
        character_text = get_character_text(c.from_user.id)
        audio_path = get_last_audio(c.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        gender = get_character_gender(c.from_user.id)
        age = get_character_age(c.from_user.id)
        
        log(f"[UGC] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: character_idx={character_idx}, gender={gender}, age={age}")
        log(f"[UGC] –¢–µ–∫—Å—Ç: {character_text[:30] if character_text else 'None'}...")
        log(f"[UGC] –ê—É–¥–∏–æ: {audio_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if not gender or not age or character_idx is None:
            raise Exception("–ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å). –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        
        selected_frame = get_character_image(gender, age, character_idx)
        log(f"[UGC] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {gender}/{age}, –∏–Ω–¥–µ–∫—Å {character_idx}")
        
        if not selected_frame:
            log(f"[UGC] ‚ùå –ö–∞–¥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            if gender and age:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –ø–æ–ª={gender}, –≤–æ–∑—Ä–∞—Å—Ç={age}, –∏–Ω–¥–µ–∫—Å={character_idx}")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–¥—Ä")
        
        if not audio_path or not os.path.exists(audio_path):
            log(f"[UGC] ‚ùå –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª")
        
        log(f"[UGC] –í—ã–±—Ä–∞–Ω –∫–∞–¥—Ä: {selected_frame}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é fal.ai OmniHuman
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–¥—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –∞—É–¥–∏–æ
        await c.message.answer("üé¨ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≥—É–±... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã)")
        log(f"[UGC] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é talking head –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ fal.ai...")
        log(f"[UGC] –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–¥—Ä: {selected_frame}")
        log(f"[UGC] –ê—É–¥–∏–æ —Ñ–∞–π–ª: {audio_path}")
        
        try:
            video_path = await generate_talking_head_video(
                audio_path=audio_path,
                image_path=selected_frame
            )
            log(f"[UGC] –í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {video_path}")
        except Exception as video_error:
            log(f"[UGC] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {video_error}")
            import traceback
            traceback.print_exc()
            # –ê–≤—Ç–æ-—Ä–µ—Ñ–∞–Ω–¥ –∫—Ä–µ–¥–∏—Ç–∞ –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            from tg_bot.utils.credits import add_credits
            add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_ugc_fail")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {str(video_error)}")
        
        if video_path:
            await c.message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ...")
            log(f"[UGC] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            
            await c.message.answer_video(
                FSInputFile(video_path), 
                caption=f"üéâ –¢–≤–æ—è UGC —Ä–µ–∫–ª–∞–º–∞ –≥–æ—Ç–æ–≤–∞!\n\n(-{COST_UGC_VIDEO} –∫—Ä–µ–¥–∏—Ç —Å–ø–∏—Å–∞–Ω)"
            )
            log(f"[UGC] ‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                if os.path.exists(video_path):
                    os.remove(video_path)
                    log(f"[UGC] ‚úÖ –í–∏–¥–µ–æ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {video_path}")
            except Exception as cleanup_error:
                log(f"[UGC] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª: {cleanup_error}")
        else:
            # –ê–≤—Ç–æ-—Ä–µ—Ñ–∞–Ω–¥ –µ—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
            from tg_bot.utils.credits import add_credits
            add_credits(c.from_user.id, COST_UGC_VIDEO, "refund_ugc_fail")
            raise Exception("–í–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        log(f"[UGC] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –≤–∏–¥–µ–æ
        await c.message.answer(
            "üé¨ –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É UGC —Ä–µ–∫–ª–∞–º—É?",
            reply_markup=main_menu()
        )
        
    except Exception as e:
        log(f"[UGC] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ UGC —Ä–µ–∫–ª–∞–º—ã: {e}")
        import traceback
        traceback.print_exc()
        
        await c.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:\n\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=main_menu()
        )
        await state.clear()
    
    await c.answer()

@dp.callback_query(F.data == "audio_redo")
async def audio_redo(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∞—É–¥–∏–æ"""
    await c.message.answer(
        "üîÑ –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º?",
        reply_markup=text_change_decision_menu()
    )
    await state.set_state(UGCCreation.waiting_text_change_decision)
    await c.answer()

@dp.callback_query(F.data == "change_text_yes")
async def change_text_yes(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç"""
    await c.message.answer(
        "‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º, —á—Ç–æ–±—ã –æ–∑–≤—É—á–∫–∞ –∑–∞–Ω—è–ª–∞ –Ω–µ –±–æ–ª–µ–µ 15 —Å–µ–∫—É–Ω–¥!",
        parse_mode="HTML",
        reply_markup=back_to_main_menu()
    )
    await state.set_state(UGCCreation.waiting_new_character_text)
    await c.answer()

@dp.callback_query(F.data == "change_text_no")
async def change_text_no(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    character_text = get_character_text(c.from_user.id)
    
    if not character_text:
        await c.message.answer(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return await c.answer()
    
    voice_id = get_selected_voice(c.from_user.id)
    
    if not voice_id:
        await c.message.answer(
            "‚ùå –ì–æ–ª–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return await c.answer()
    
    try:
        await c.message.answer("üé§ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–∑–≤—É—á–∫—É —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º...")
        print(f"[UGC] –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {c.from_user.id}, voice_id={voice_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        old_audio_path = get_last_audio(c.from_user.id)
        if old_audio_path and os.path.exists(old_audio_path):
            try:
                os.remove(old_audio_path)
            except:
                pass
        
        audio_path = await tts_to_file(character_text, voice_id)
        
        if not audio_path:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        print(f"[UGC] –ê—É–¥–∏–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {audio_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –∞—É–¥–∏–æ
        set_last_audio(c.from_user.id, audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_valid, duration = check_audio_duration_limit(audio_path, max_seconds=15.0)
        
        print(f"[UGC] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫, –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
        
        if not is_valid:
            await c.message.answer(
                f"‚ùå <b>–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –æ–∑–≤—É—á–∫–∏: <b>{duration:.1f} —Å–µ–∫—É–Ω–¥</b>\n"
                f"–ú–∞–∫—Å–∏–º—É–º: <b>15 —Å–µ–∫—É–Ω–¥</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=back_to_main_menu()
            )
            # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
            except:
                pass
            await state.clear()
            return await c.answer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
        await c.message.answer_audio(
            FSInputFile(audio_path),
            caption=f"üé§ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–∑–≤—É—á–∫–∏ ({duration:.1f} —Å–µ–∫)"
        )
        
        # –°–Ω–æ–≤–∞ –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å
        await c.message.answer(
            "‚úÖ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            reply_markup=audio_confirmation_menu()
        )
        
        await state.set_state(UGCCreation.waiting_audio_confirmation)
        
    except Exception as e:
        print(f"[UGC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        import traceback
        traceback.print_exc()
        
        await c.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=main_menu()
        )
        await state.clear()
    
    await c.answer()

@dp.callback_query(F.data == "change_voice")
async def change_voice(c: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character_text = get_character_text(c.from_user.id)
    
    if not character_text:
        await c.message.answer(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return await c.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—ã–±—Ä–∞–Ω—ã
    gender = get_character_gender(c.from_user.id)
    age = get_character_age(c.from_user.id)
    
    if not gender or not age:
        await c.message.answer(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return await c.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ–ª–æ—Å–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
    set_voice_page(c.from_user.id, 0)
    await show_voice_gallery(c, state)

@dp.message(UGCCreation.waiting_new_character_text)
async def new_character_text_received(m: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–µ–ª–∫–∏ –∞—É–¥–∏–æ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    set_character_text(m.from_user.id, m.text)
    print(f"User {m.from_user.id} –≤–≤–µ–ª –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {m.text[:50]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
    voice_id = get_selected_voice(m.from_user.id)
    
    if not voice_id:
        await m.answer(
            "‚ùå –ì–æ–ª–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    try:
        await m.answer("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—É—é –æ–∑–≤—É—á–∫—É...")
        print(f"[UGC] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m.from_user.id}, voice_id={voice_id}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        old_audio_path = get_last_audio(m.from_user.id)
        if old_audio_path and os.path.exists(old_audio_path):
            try:
                os.remove(old_audio_path)
            except:
                pass
        
        audio_path = await tts_to_file(m.text, voice_id)
        
        if not audio_path:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        print(f"[UGC] –ù–æ–≤–æ–µ –∞—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {audio_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ
        set_last_audio(m.from_user.id, audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_valid, duration = check_audio_duration_limit(audio_path, max_seconds=15.0)
        
        print(f"[UGC] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫, –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
        
        if not is_valid:
            await m.answer(
                f"‚ùå <b>–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –æ–∑–≤—É—á–∫–∏: <b>{duration:.1f} —Å–µ–∫—É–Ω–¥</b>\n"
                f"–ú–∞–∫—Å–∏–º—É–º: <b>15 —Å–µ–∫—É–Ω–¥</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=back_to_main_menu()
            )
            # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
            except:
                pass
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        await m.answer_audio(
            FSInputFile(audio_path),
            caption=f"üé§ –í–æ—Ç –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å ({duration:.1f} —Å–µ–∫)"
        )
        
        # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∞—É–¥–∏–æ
        await m.answer(
            "‚úÖ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            reply_markup=audio_confirmation_menu()
        )
        
        await state.set_state(UGCCreation.waiting_audio_confirmation)
        
    except Exception as e:
        print(f"[UGC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: {e}")
        import traceback
        traceback.print_exc()
        
        await m.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=main_menu()
        )
        await state.clear()

@dp.message(UGCCreation.waiting_character_text)
async def character_text_received(m: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    set_character_text(m.from_user.id, m.text)
    print(f"User {m.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {m.text[:50]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å
    voice_id = get_selected_voice(m.from_user.id)
    
    if not voice_id:
        await m.answer(
            "‚ùå –ì–æ–ª–æ—Å –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await m.answer("üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–∑–≤—É—á–∫—É...")
        print(f"[UGC] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m.from_user.id}, voice_id={voice_id}")
        
        audio_path = await tts_to_file(m.text, voice_id)
        
        if not audio_path:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        print(f"[UGC] –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {audio_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ
        set_last_audio(m.from_user.id, audio_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        is_valid, duration = check_audio_duration_limit(audio_path, max_seconds=15.0)
        
        print(f"[UGC] –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration:.2f} —Å–µ–∫, –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
        
        if not is_valid:
            await m.answer(
                f"‚ùå <b>–ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!</b>\n\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–≤–æ–µ–π –æ–∑–≤—É—á–∫–∏: <b>{duration:.1f} —Å–µ–∫—É–Ω–¥</b>\n"
                f"–ú–∞–∫—Å–∏–º—É–º: <b>15 —Å–µ–∫—É–Ω–¥</b>\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                parse_mode="HTML",
                reply_markup=back_to_main_menu()
            )
            # –û—á–∏—Å—Ç–∫–∞ –∞—É–¥–∏–æ
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
            except:
                pass
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        await m.answer_audio(
            FSInputFile(audio_path),
            caption=f"üé§ –í–æ—Ç –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å ({duration:.1f} —Å–µ–∫)"
        )
        
        # –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∞—É–¥–∏–æ
        await m.answer(
            "‚úÖ –û–∑–≤—É—á–∫–∞ –≥–æ—Ç–æ–≤–∞! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
            reply_markup=audio_confirmation_menu()
        )
        
        await state.set_state(UGCCreation.waiting_audio_confirmation)
        
    except Exception as e:
        print(f"[UGC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        import traceback
        traceback.print_exc()
        
        await m.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=main_menu()
        )
        await state.clear()


# --- Settings Menu ---
@dp.callback_query(F.data == "settings")
async def show_settings(c: CallbackQuery):
    await c.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        parse_mode="HTML",
        reply_markup=settings_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "topup_request")
async def topup_request(c: CallbackQuery):
    await c.message.answer(
        "–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=back_to_main_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "voice_settings")
async def show_voice_settings(c: CallbackQuery):
    await c.message.edit_text(
        "üé§ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤</b>\n\n"
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞–º–∏ –¥–ª—è –æ–∑–≤—É—á–∫–∏:",
        parse_mode="HTML",
        reply_markup=voice_settings_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "listen_voices")
async def listen_voices(c: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è (–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    voices = list_all_voice_samples()
    
    if not voices:
        await c.message.answer(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=voice_settings_menu()
        )
        return await c.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—ç–º–ø–ª—ã –≥–æ–ª–æ—Å–æ–≤ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for idx, (name, voice_id, sample_path) in enumerate(voices):
        await c.message.answer_audio(
            FSInputFile(sample_path),
            caption=f"üé§ –ì–æ–ª–æ—Å #{idx+1}: {name}"
        )
    
    await c.message.answer(
        f"üéµ –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏ (–≤—Å–µ–≥–æ {len(voices)}):\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –≤–∞–º –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–∞, "
        "–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø–æ –ø–æ–ª—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É).",
        parse_mode="HTML",
        reply_markup=voice_settings_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "stats")
async def show_stats(c: CallbackQuery):
    credits = get_credits(c.from_user.id)
    await c.message.edit_text(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: {credits}\n"
        f"üé¨ –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: 0\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –Ω–µ–¥–∞–≤–Ω–æ\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
        parse_mode="HTML",
        reply_markup=settings_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "about")
async def show_about(c: CallbackQuery):
    await c.message.edit_text(
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
        "ü§ñ <b>GenAI UGC Ads Bot</b>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ UGC —Ä–µ–∫–ª–∞–º–Ω—ã–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò!\n\n"
        "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–≤–æ—Ä—è—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π\n"
        "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥—É–± —Å –∞—É–¥–∏–æ\n"
        "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ\n\n"
        "üöÄ <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
        "‚Ä¢ Google Veo3 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ ElevenLabs –¥–ª—è –æ–∑–≤—É—á–∫–∏\n"
        "‚Ä¢ fal.ai –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥—É–±",
        parse_mode="HTML",
        reply_markup=settings_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "support")
async def show_support(c: CallbackQuery):
    await c.message.edit_text(
        "üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
        "üìß <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:</b>\n"
        "‚Ä¢ Telegram: @your_support_username\n"
        "‚Ä¢ Email: support@example.com\n\n"
        "‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –¥–æ 24 —á–∞—Å–æ–≤\n\n"
        "üîß <b>–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        "‚Ä¢ –í–∏–¥–µ–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è ‚Üí –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—Ä–µ–¥–∏—Ç—ã\n"
        "‚Ä¢ –ü–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Üí –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂\n"
        "‚Ä¢ –û—à–∏–±–∫–∏ ‚Üí –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å",
        parse_mode="HTML",
        reply_markup=settings_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "model_settings")
async def show_model_settings(c: CallbackQuery):
    await c.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏</b>\n\n"
        "üîß <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ –ú–æ–¥–µ–ª—å –≤–∏–¥–µ–æ: Google Veo3\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: –í—ã—Å–æ–∫–æ–µ\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 6 —Å–µ–∫—É–Ω–¥\n\n"
        "‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
        "‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 2-3 –º–∏–Ω—É—Ç—ã\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ~5-10 –ú–ë\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.",
        parse_mode="HTML",
        reply_markup=bottom_navigation_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "profile")
async def show_profile(c: CallbackQuery):
    credits = get_credits(c.from_user.id)
    await c.message.edit_text(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: {c.from_user.id}\n"
        f"üë§ –ò–º—è: {c.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: {credits}\n"
        f"üìÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n"
        f"üé¨ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: 0\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Å–µ–π—á–∞—Å\n\n"
        f"üí° <b>–°–æ–≤–µ—Ç:</b> –†–µ–≥—É–ª—è—Ä–Ω–æ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!",
        parse_mode="HTML",
        reply_markup=bottom_navigation_menu()
    )
    await c.answer()

@dp.callback_query(F.data == "back_previous")
async def back_previous(c: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é"""
    await c.message.edit_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    await c.answer()

# --- Navigation ---
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    await state.clear()
    await c.answer()

@dp.callback_query(F.data == "back_to_ugc")
async def back_to_ugc(c: CallbackQuery, state: FSMContext):
    await c.message.edit_text(
        "üé¨ <b>–°–æ–∑–¥–∞–Ω–∏–µ UGC —Ä–µ–∫–ª–∞–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        parse_mode="HTML",
        reply_markup=ugc_start_menu()
    )
    await state.clear()
    await c.answer()

async def main():
    # Detect if running in Railway/production (has PORT env var) or locally
    port = os.getenv("PORT")
    railway_public_domain = os.getenv("RAILWAY_PUBLIC_DOMAIN")
    
    if port and railway_public_domain:
        # Railway/Production mode: use webhook
        from aiohttp import web
        
        # Construct webhook URL from Railway public domain
        webhook_url = f"https://{railway_public_domain}/webhook"
        print(f"Setting webhook to: {webhook_url}")
        
        try:
            # Ensure old webhook (if any) is removed first to avoid conflicts
            await bot.delete_webhook(drop_pending_updates=True)
            print("Deleted existing webhook (if any)")
        except Exception as e:
            print(f"Failed to delete existing webhook (continuing): {e}")

        try:
            await bot.set_webhook(webhook_url, drop_pending_updates=True)
            print("Webhook set successfully!")
        except Exception as e:
            print(f"Failed to set webhook: {e}")
        
        # Create aiohttp app
        app = web.Application()
        
        # Register dispatcher webhook handler
        from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
        SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
        
        # Add health check endpoint
        async def health(request):
            return web.Response(text="OK")
        app.router.add_get("/health", health)
        app.router.add_get("/", health)
        
        setup_application(app, dp, bot=bot)
        
        # Run web server
        port_num = int(port)
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, host="0.0.0.0", port=port_num)
        print(f"Starting webhook server on port {port_num}")
        await site.start()
        
        # Keep running
        await asyncio.Event().wait()
    else:
        # Local mode: use polling
        print("Starting in polling mode (local development)")
        # Ensure webhook is removed to avoid conflict with getUpdates
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            print("‚úÖ Deleted webhook before starting polling")
        except Exception as del_err:
            print(f"‚ö†Ô∏è  Failed to delete webhook before polling: {del_err}")
        await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
