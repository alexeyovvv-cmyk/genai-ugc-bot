import os
import time
import functools
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select

from tg_bot.utils.credits import get_credits, add_credits
from tg_bot.db import SessionLocal
from tg_bot.models import User, CreditLog
from tg_bot.utils.storage_stats import format_storage_summary, get_temp_file_stats
from tg_bot.services.r2_service import cleanup_temp_files, test_connection

# Create dispatcher instance
dp = Dispatcher()


ADMIN_TG_IDS = set(int(x) for x in os.getenv("ADMIN_TG_IDS", "").split(',') if x.strip())
RATE_LIMIT_WINDOW_SEC = int(os.getenv("ADMIN_RATE_LIMIT_WINDOW_SEC", "10"))
RATE_LIMIT_MAX_OPS = int(os.getenv("ADMIN_RATE_LIMIT_MAX_OPS", "5"))
ADMIN_FEEDBACK_CHAT_ID = int(os.getenv("ADMIN_FEEDBACK_CHAT_ID", "0"))

_admin_ops: dict[int, list[float]] = {}


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_TG_IDS


def ensure_private_not_forwarded(m: Message) -> bool:
    # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if not m.chat or getattr(m.chat, "type", None) != "private":
        return False
    # –ù–µ –¥–æ–≤–µ—Ä—è—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º/–≤–Ω–µ—à–Ω–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    if getattr(m, "forward_date", None) or getattr(m, "forward_origin", None):
        return False
    return True


def rate_limited(func):
    @functools.wraps(func)
    async def wrapper(m: Message, *args, **kwargs):
        admin_id = m.from_user.id if m.from_user else 0
        now = time.time()
        bucket = _admin_ops.setdefault(admin_id, [])
        cutoff = now - RATE_LIMIT_WINDOW_SEC
        while bucket and bucket[0] < cutoff:
            bucket.pop(0)
        if len(bucket) >= RATE_LIMIT_MAX_OPS:
            await m.answer("‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        bucket.append(now)
        return await func(m, *args, **kwargs)
    return wrapper


def parse_args(text: str) -> list[str]:
    parts = (text or "").split()
    return parts[1:] if len(parts) > 1 else []


def setup_admin(dp, bot_instance):
    @dp.message(Command("credit_get"))
    @rate_limited
    async def credit_get(m: Message):
        if not (m.from_user and is_admin(m.from_user.id) and ensure_private_not_forwarded(m)):
            return
        args = parse_args(m.text)
        if len(args) < 1 or not args[0].isdigit():
            return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /credit_get <tg_id>")
        tg_id = int(args[0])
        bal = get_credits(tg_id)
        # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π
        with SessionLocal() as db:
            user = db.scalar(select(User).where(User.tg_id == tg_id))
            logs = []
            if user:
                logs = db.execute(
                    select(CreditLog)
                    .where(CreditLog.user_id == user.id)
                    .order_by(CreditLog.created_at.desc())
                    .limit(5)
                ).scalars().all()
        history = "\n".join([
            f"{'+' if l.delta>0 else ''}{l.delta} | {l.reason} | {l.created_at}" for l in logs
        ]) if logs else "–Ω–µ—Ç"
        await m.answer(f"–ë–∞–ª–∞–Ω—Å: {bal}\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n{history}")

    @dp.message(Command("credit_add"))
    @rate_limited
    async def credit_add_cmd(m: Message):
        if not (m.from_user and is_admin(m.from_user.id) and ensure_private_not_forwarded(m)):
            return
        args = parse_args(m.text)
        if len(args) < 2 or not args[0].isdigit() or not args[1].isdigit():
            return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /credit_add <tg_id> <amount> [reason]")
        tg_id = int(args[0]); amount = int(args[1]); reason = "admin_add"
        if len(args) >= 3:
            reason = " ".join(args[2:])[:100]
        add_credits(tg_id, amount, reason)
        await m.answer(f"OK: +{amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è {tg_id} (reason={reason})")


    @dp.message(Command("credit_history"))
    @rate_limited
    async def credit_history_cmd(m: Message):
        if not (m.from_user and is_admin(m.from_user.id) and ensure_private_not_forwarded(m)):
            return
        args = parse_args(m.text)
        if len(args) < 1 or not args[0].isdigit():
            return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /credit_history <tg_id> [limit]")
        tg_id = int(args[0])
        limit = int(args[1]) if len(args) >= 2 and args[1].isdigit() else 10
        with SessionLocal() as db:
            user = db.scalar(select(User).where(User.tg_id == tg_id))
            if not user:
                return await m.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logs = db.execute(
                select(CreditLog)
                .where(CreditLog.user_id == user.id)
                .order_by(CreditLog.created_at.desc())
                .limit(limit)
            ).scalars().all()
        if not logs:
            return await m.answer("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
        lines = [f"{'+' if l.delta>0 else ''}{l.delta} | {l.reason} | {l.created_at}" for l in logs]
        await m.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n" + "\n".join(lines))

    @dp.message(Command("reply"))
    @rate_limited
    async def admin_reply(m: Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ADMIN_FEEDBACK_CHAT_ID
        if str(m.chat.id) != str(ADMIN_FEEDBACK_CHAT_ID):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
        if not (m.from_user and is_admin(m.from_user.id)):
            return
        
        parts = (m.text or "").split(maxsplit=2)
        if len(parts) < 3 or not parts[1].isdigit():
            return await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <tg_id> <text>")
        
        target_id = int(parts[1])
        reply_text = parts[2]
        
        try:
            await bot_instance.send_message(chat_id=target_id, text=f"üõ† –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}")
            await m.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except Exception as e:
            import traceback
            error_details = f"{type(e).__name__}: {str(e)}"
            await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n–û—à–∏–±–∫–∞: {error_details}")
            print(f"[ADMIN_REPLY] Error sending message to {target_id}: {error_details}")
            traceback.print_exc()

    @dp.message(Command("stats"))
    @rate_limited
    async def stats_command(m: Message):
        print(f"[ADMIN_STATS] Stats command received from user {m.from_user.id if m.from_user else 'unknown'}")
        print(f"[ADMIN_STATS] Chat ID: {m.chat.id}, Expected: {ADMIN_FEEDBACK_CHAT_ID}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ADMIN_FEEDBACK_CHAT_ID
        if str(m.chat.id) != str(ADMIN_FEEDBACK_CHAT_ID):
            print(f"[ADMIN_STATS] ‚ùå REJECTED: Message not from admin feedback chat")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
        if not (m.from_user and is_admin(m.from_user.id)):
            print(f"[ADMIN_STATS] ‚ùå REJECTED: User {m.from_user.id if m.from_user else 'unknown'} is not admin")
            return
        
        print(f"[ADMIN_STATS] ‚úÖ User {m.from_user.id} is authorized, generating statistics...")
        
        try:
            print("[ADMIN_STATS] Importing statistics module...")
            from tg_bot.utils.statistics import generate_statistics_report
            
            print("[ADMIN_STATS] Generating statistics report...")
            report = generate_statistics_report()
            print(f"[ADMIN_STATS] Report generated successfully (length: {len(report)} chars)")
            
            print("[ADMIN_STATS] Sending report to admin...")
            await m.answer(report, parse_mode="HTML")
            print(f"[ADMIN_STATS] ‚úÖ Statistics report sent successfully to admin {m.from_user.id}")
            
        except ImportError as ie:
            error_msg = f"[ADMIN_STATS] ‚ùå IMPORT ERROR: Could not import statistics module: {ie}"
            print(error_msg)
            await m.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
                f"üîç <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> ImportError\n"
                f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {str(ie)}\n\n"
                f"üí° <b>–†–µ—à–µ–Ω–∏–µ:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª tg_bot/utils/statistics.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.",
                parse_mode="HTML"
            )
        except Exception as e:
            error_msg = f"[ADMIN_STATS] ‚ùå CRITICAL ERROR: {type(e).__name__}: {str(e)}"
            print(error_msg)
            print(f"[ADMIN_STATS] Full traceback:")
            import traceback
            traceback.print_exc()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
            error_report = f"""‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

üîç <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {type(e).__name__}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {str(e)}
üë§ <b>–ê–¥–º–∏–Ω:</b> {m.from_user.id if m.from_user else 'unknown'}
üïê <b>–í—Ä–µ–º—è:</b> {os.getenv('TZ', 'UTC')}

üìã <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</b>
<code>{traceback.format_exc()}</code>

üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û—à–∏–±–∫–∏ –≤ SQL –∑–∞–ø—Ä–æ—Å–∞—Ö
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
            
            await m.answer(error_report, parse_mode="HTML")

    @dp.message(Command("detailed_stats"))
    @rate_limited
    async def detailed_stats_command(m: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        print(f"[ADMIN_DETAILED_STATS] Command received from user {m.from_user.id if m.from_user else 'unknown'}")
        print(f"[ADMIN_DETAILED_STATS] Chat ID: {m.chat.id}, Expected: {ADMIN_FEEDBACK_CHAT_ID}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ ADMIN_FEEDBACK_CHAT_ID
        if str(m.chat.id) != str(ADMIN_FEEDBACK_CHAT_ID):
            print(f"[ADMIN_DETAILED_STATS] ‚ùå REJECTED: Message not from admin feedback chat")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤
        if not (m.from_user and is_admin(m.from_user.id)):
            print(f"[ADMIN_DETAILED_STATS] ‚ùå REJECTED: User {m.from_user.id if m.from_user else 'unknown'} is not admin")
            return
        
        print(f"[ADMIN_DETAILED_STATS] ‚úÖ User {m.from_user.id} is authorized, generating detailed stats...")
        
        try:
            from datetime import datetime, timedelta
            from sqlalchemy import func, case
            
            print("[ADMIN_DETAILED_STATS] Querying database...")
            
            with SessionLocal() as db:
                # –í—ã—á–∏—Å–ª—è–µ–º timestamp 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
                time_24h_ago = datetime.utcnow() - timedelta(hours=24)
                
                # –ó–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –∫—Ä–µ–¥–∏—Ç–æ–≤
                query = (
                    select(
                        User.tg_id,
                        User.first_name,
                        User.last_name,
                        User.username,
                        User.credits,
                        # –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ = —Å—É–º–º–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö delta
                        func.coalesce(
                            func.sum(case((CreditLog.delta < 0, -CreditLog.delta), else_=0)),
                            0
                        ).label('total_spent'),
                        # –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ 24 —á–∞—Å–∞
                        func.coalesce(
                            func.sum(
                                case(
                                    (
                                        (CreditLog.delta < 0) & (CreditLog.created_at >= time_24h_ago),
                                        -CreditLog.delta
                                    ),
                                    else_=0
                                )
                            ),
                            0
                        ).label('spent_24h')
                    )
                    .outerjoin(CreditLog, User.id == CreditLog.user_id)
                    .group_by(User.id, User.tg_id, User.first_name, User.last_name, User.username, User.credits)
                    .order_by(User.tg_id)
                )
                
                results = db.execute(query).all()
                
                print(f"[ADMIN_DETAILED_STATS] Found {len(results)} users")
                
                if not results:
                    await m.answer("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                
                for row in results:
                    tg_id = row.tg_id
                    first_name = row.first_name or ""
                    last_name = row.last_name or ""
                    username = row.username
                    total_spent = int(row.total_spent)
                    spent_24h = int(row.spent_24h)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    full_name = f"{first_name} {last_name}".strip()
                    if not full_name:
                        full_name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    
                    username_text = f"@{username}" if username else "–Ω–µ—Ç username"
                    
                    message_text += f"üë§ TG ID: <code>{tg_id}</code> | {full_name} ({username_text})\n"
                    message_text += f"   üí≥ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                    message_text += f"   ‚è∞ –ó–∞ 24 —á–∞—Å–∞: {spent_24h} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                
                message_text += f"üìà <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(results)}</b>"
                
                print(f"[ADMIN_DETAILED_STATS] Message length: {len(message_text)} chars")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                if len(message_text) > 4096:
                    print("[ADMIN_DETAILED_STATS] Message too long, splitting into parts...")
                    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                    parts = []
                    current_part = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                    
                    for row in results:
                        tg_id = row.tg_id
                        first_name = row.first_name or ""
                        last_name = row.last_name or ""
                        username = row.username
                        total_spent = int(row.total_spent)
                        spent_24h = int(row.spent_24h)
                        
                        full_name = f"{first_name} {last_name}".strip()
                        if not full_name:
                            full_name = "–ë–µ–∑ –∏–º–µ–Ω–∏"
                        
                        username_text = f"@{username}" if username else "–Ω–µ—Ç username"
                        
                        user_text = (
                            f"üë§ TG ID: <code>{tg_id}</code> | {full_name} ({username_text})\n"
                            f"   üí≥ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                            f"   ‚è∞ –ó–∞ 24 —á–∞—Å–∞: {spent_24h} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                        )
                        
                        if len(current_part) + len(user_text) > 4000:
                            parts.append(current_part)
                            current_part = user_text
                        else:
                            current_part += user_text
                    
                    if current_part:
                        current_part += f"\nüìà <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(results)}</b>"
                        parts.append(current_part)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
                    print(f"[ADMIN_DETAILED_STATS] Sending {len(parts)} message parts...")
                    for i, part in enumerate(parts, 1):
                        await m.answer(part, parse_mode="HTML")
                        print(f"[ADMIN_DETAILED_STATS] Part {i}/{len(parts)} sent")
                else:
                    print("[ADMIN_DETAILED_STATS] Sending single message...")
                    await m.answer(message_text, parse_mode="HTML")
                
                print(f"[ADMIN_DETAILED_STATS] ‚úÖ Detailed stats sent successfully to admin {m.from_user.id}")
                    
        except Exception as e:
            import traceback
            error_msg = f"[ADMIN_DETAILED_STATS] ‚ùå ERROR: {type(e).__name__}: {str(e)}"
            print(error_msg)
            print(f"[ADMIN_DETAILED_STATS] Full traceback:")
            traceback.print_exc()
            
            error_report = f"""‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

üîç <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {type(e).__name__}
üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {str(e)}
üë§ <b>–ê–¥–º–∏–Ω:</b> {m.from_user.id if m.from_user else 'unknown'}

üìã <b>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:</b>
<code>{traceback.format_exc()}</code>"""
            
            await m.answer(error_report, parse_mode="HTML")

@dp.message(Command("storage"))
async def admin_storage(m: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É R2 —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        summary = format_storage_summary()
        await m.answer(summary, parse_mode="Markdown")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")

@dp.message(Command("cleanup_temp"))
async def admin_cleanup_temp(m: Message):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤—Ä—É—á–Ω—É—é"""
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # Get stats before cleanup
        temp_stats_before = get_temp_file_stats()
        
        # Run cleanup
        cleanup_stats = cleanup_temp_files()
        
        # Format response
        response = f"""üßπ **–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤**

**–î–æ –æ—á–∏—Å—Ç–∫–∏:**
‚Ä¢ –§–∞–π–ª–æ–≤: {temp_stats_before.get('total_files', 0):,}
‚Ä¢ –†–∞–∑–º–µ—Ä: {temp_stats_before.get('total_size_mb', 0):.2f} MB

**–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏:**
‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleanup_stats['deleted_files']}
‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {cleanup_stats['deleted_size_mb']:.2f} MB

‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"""
        
        await m.answer(response, parse_mode="Markdown")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

@dp.message(Command("r2_test"))
async def admin_r2_test(m: Message):
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ R2"""
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        if test_connection():
            await m.answer("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ R2 —É—Å–ø–µ—à–Ω–æ")
        else:
            await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ R2")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è R2: {e}")

@dp.message(Command("webhook_reset"))
async def admin_webhook_reset(m: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å webhook"""
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # Delete current webhook
        await bot_instance.delete_webhook(drop_pending_updates=True)
        await m.answer("‚úÖ Webhook —É–¥–∞–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã...")
        
        import asyncio
        await asyncio.sleep(2)
        
        # Get webhook URL from environment
        webhook_url = os.getenv("WEBHOOK_URL")
        if not webhook_url:
            await m.answer("‚ùå WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # Set new webhook
        await bot_instance.set_webhook(webhook_url, drop_pending_updates=True)
        
        # Verify webhook
        webhook_info = await bot_instance.get_webhook_info()
        
        await m.answer(
            f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n\n"
            f"üîó URL: {webhook_info.url}\n"
            f"üìä Pending updates: {webhook_info.pending_update_count}\n"
            f"üïê Last error: {webhook_info.last_error_date or '–ù–µ—Ç'}"
        )
        
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook: {e}")

