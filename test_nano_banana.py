#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ nano-banana API
"""
import asyncio
import os
from dotenv import load_dotenv
from tg_bot.services.nano_banana_service import edit_character_image

load_dotenv()

async def test_nano_banana():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º nano-banana API —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º nano-banana API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FAL_KEY
    fal_key = os.getenv('FAL_KEY') or os.getenv('FALAI_API_TOKEN')
    if not fal_key:
        print("‚ùå FAL_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ FAL_KEY –Ω–∞–π–¥–µ–Ω: {fal_key[:10]}...")
    
    # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    test_image_path = None
    characters_dir = "data/characters"
    
    for gender in ["male", "female"]:
        for age in ["young", "elderly"]:
            gender_dir = os.path.join(characters_dir, gender, age)
            if os.path.exists(gender_dir):
                images = [f for f in os.listdir(gender_dir) if f.endswith(('.png', '.jpg', '.jpeg'))]
                if images:
                    test_image_path = os.path.join(gender_dir, images[0])
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
                    break
        if test_image_path:
            break
    
    if not test_image_path:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_prompt = "add sunglasses"
    print(f"üé® –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º: '{test_prompt}'")
    print(f"üì∑ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
    
    try:
        result_path = await edit_character_image(test_image_path, test_prompt)
        
        if result_path:
            print(f"‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(result_path):
                file_size = os.path.getsize(result_path)
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                return True
            else:
                print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_nano_banana())
    if success:
        print("\nüéâ –¢–µ—Å—Ç nano-banana API –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç nano-banana API –Ω–µ –ø—Ä–æ—à–µ–ª")
