#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from tg_bot.db import engine
from sqlalchemy import text, inspect

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    try:
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            print(f"üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {tables}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user_state
            if 'user_state' in tables:
                print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_state:")
                columns = inspector.get_columns('user_state')
                for col in columns:
                    print(f"  - {col['name']}: {col['type']} (nullable: {col['nullable']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                column_names = [col['name'] for col in columns]
                required_columns = ['character_gender', 'character_age', 'character_page']
                
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {column_names}")
                print(f"üîç –¢—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")
                
                missing_columns = [col for col in required_columns if col not in column_names]
                if missing_columns:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
                else:
                    print("‚úÖ –í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            if 'users' in tables:
                print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
                columns = inspector.get_columns('users')
                for col in columns:
                    print(f"  - {col['name']}: {col['type']} (nullable: {col['nullable']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
            print("\nüìä –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = conn.execute(text("SELECT COUNT(*) FROM users")).fetchone()
            print(f"  üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0]}")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ user_state
            result = conn.execute(text("SELECT COUNT(*) FROM user_state")).fetchone()
            print(f"  üìù –ó–∞–ø–∏—Å–µ–π –≤ user_state: {result[0]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
            if 'character_gender' in column_names:
                result = conn.execute(text("SELECT COUNT(*) FROM user_state WHERE character_gender IS NOT NULL")).fetchone()
                print(f"  üë§ –ó–∞–ø–∏—Å–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª–æ–º: {result[0]}")
            
            if 'character_age' in column_names:
                result = conn.execute(text("SELECT COUNT(*) FROM user_state WHERE character_age IS NOT NULL")).fetchone()
                print(f"  üéÇ –ó–∞–ø–∏—Å–µ–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º: {result[0]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_database_structure()
