#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
"""
import os
from dotenv import load_dotenv
from sqlalchemy import create_engine, select, text
from sqlalchemy.orm import sessionmaker
from tg_bot.models import User, CreditLog

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    print("‚ö†Ô∏è  Using local SQLite database")
    DATABASE_URL = "sqlite:///genai.db"

print(f"üîß Connecting to database...")
engine = create_engine(DATABASE_URL, echo=False)
Session = sessionmaker(bind=engine)

def show_all_users():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∫—Ä–µ–¥–∏—Ç—ã"""
    with Session() as session:
        users = session.execute(select(User)).scalars().all()
        
        if not users:
            print("\n‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print("\n" + "="*80)
        print("üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò –ò–• –ö–†–ï–î–ò–¢–´")
        print("="*80)
        
        for user in users:
            print(f"\nüÜî User ID: {user.id} | Telegram ID: {user.tg_id}")
            print(f"üí∞ –ö—Ä–µ–¥–∏—Ç—ã: {user.credits}")
            print(f"üé§ –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å: {user.selected_voice_id or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}")
            print(f"üìÖ –°–æ–∑–¥–∞–Ω: {user.created_at}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
            logs = session.execute(
                select(CreditLog)
                .where(CreditLog.user_id == user.id)
                .order_by(CreditLog.created_at.desc())
                .limit(5)
            ).scalars().all()
            
            if logs:
                print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
                for log in logs:
                    sign = "+" if log.delta > 0 else ""
                    print(f"  {log.created_at} | {sign}{log.delta} –∫—Ä–µ–¥–∏—Ç–æ–≤ | {log.reason}")
            else:
                print(f"\nüìä –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏")
        
        print("\n" + "="*80)

def show_user_credit_history(tg_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with Session() as session:
        user = session.execute(select(User).where(User.tg_id == tg_id)).scalar_one_or_none()
        
        if not user:
            print(f"\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print("\n" + "="*80)
        print(f"üí∞ –ò–°–¢–û–†–ò–Ø –ö–†–ï–î–ò–¢–û–í - User {tg_id}")
        print("="*80)
        print(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        print("-"*80)
        
        logs = session.execute(
            select(CreditLog)
            .where(CreditLog.user_id == user.id)
            .order_by(CreditLog.created_at.desc())
        ).scalars().all()
        
        if not logs:
            print("\n‚ùå –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏")
            return
        
        total_added = 0
        total_spent = 0
        
        for log in logs:
            sign = "+" if log.delta > 0 else ""
            emoji = "üìà" if log.delta > 0 else "üìâ"
            
            if log.delta > 0:
                total_added += log.delta
            else:
                total_spent += abs(log.delta)
            
            print(f"{emoji} {log.created_at} | {sign}{log.delta:3d} | {log.reason}")
        
        print("-"*80)
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: +{total_added} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        print(f"  –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: -{total_spent} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        print(f"  –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.credits} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞: {total_added - total_spent} = {user.credits} ‚úÖ" if total_added - total_spent == user.credits else f"  ‚ö†Ô∏è –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï!")
        print("="*80 + "\n")

def check_database_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*80)
    print("üîç –°–¢–ê–¢–£–° –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*80)
    
    try:
        with Session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            user_count = session.execute(select(User)).scalars().all()
            credit_log_count = session.execute(select(CreditLog)).scalars().all()
            
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_count)}")
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ credit_log: {len(credit_log_count)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if "sqlite" in DATABASE_URL.lower():
                print(f"\n‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite (–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)")
                print(f"   –ü—É—Ç—å: {DATABASE_URL}")
                print(f"   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: SQLite –¥–∞–Ω–Ω—ã–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –Ω–∞ Railway!")
            elif "postgresql" in DATABASE_URL.lower():
                print(f"\n‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL (–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)")
                # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ URL
                safe_url = DATABASE_URL.split('@')[1] if '@' in DATABASE_URL else DATABASE_URL
                print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ...@{safe_url}")
            else:
                print(f"\n‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL}")
            
            print("="*80 + "\n")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    check_database_status()
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω telegram_id –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(sys.argv) > 1:
        try:
            tg_id = int(sys.argv[1])
            show_user_credit_history(tg_id)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python check_credits.py <telegram_id>")
    else:
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        show_all_users()




