#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π UGC –≤ —Ç–∞–±–ª–∏—Ü—É user_state
"""
import os
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    print("‚ùå DATABASE_URL not found in environment")
    exit(1)

print(f"üîß Connecting to database...")
engine = create_engine(DATABASE_URL, echo=True)

migration_sql = """
-- –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è UGC —Ä–µ–∫–ª–∞–º—ã
ALTER TABLE user_state 
ADD COLUMN IF NOT EXISTS selected_character_idx INTEGER,
ADD COLUMN IF NOT EXISTS character_text VARCHAR,
ADD COLUMN IF NOT EXISTS situation_prompt VARCHAR;
"""

try:
    with engine.connect() as conn:
        print("üîÑ Running migration...")
        conn.execute(text(migration_sql))
        conn.commit()
        print("‚úÖ Migration completed successfully!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        result = conn.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'user_state'
            ORDER BY ordinal_position;
        """))
        
        print("\nüìä Current columns in user_state table:")
        for row in result:
            print(f"  - {row[0]}")
            
except Exception as e:
    print(f"‚ùå Migration failed: {e}")
    exit(1)

