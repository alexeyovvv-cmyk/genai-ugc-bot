#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è TG ID –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –≤ user_storage.py
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from tg_bot.utils.user_storage import save_user_generation, get_user_generations, get_user_storage_stats
from tg_bot.db import SessionLocal
from tg_bot.models import User, GenerationHistory
from sqlalchemy import select

def test_user_id_conversion():
    """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è TG ID –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è TG ID –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with SessionLocal() as db:
        user = db.execute(select(User).first()).scalar_one_or_none()
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        tg_id = user.tg_id
        internal_id = user.id
        print(f"üìä –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: TG ID = {tg_id}, Internal ID = {internal_id}")
        
        # –¢–µ—Å—Ç 1: save_user_generation
        print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ save_user_generation...")
        generation_id = save_user_generation(
            user_id=tg_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º TG ID
            generation_type="test",
            text_prompt="Test prompt",
            credits_spent=1
        )
        
        if generation_id:
            print(f"‚úÖ save_user_generation —É—Å–ø–µ—à–Ω–æ: ID = {generation_id}")
        else:
            print("‚ùå save_user_generation –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
        
        # –¢–µ—Å—Ç 2: get_user_generations
        print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_user_generations...")
        generations = get_user_generations(user_id=tg_id, limit=5)
        print(f"‚úÖ get_user_generations —É—Å–ø–µ—à–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {len(generations)} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
        
        # –¢–µ—Å—Ç 3: get_user_storage_stats
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_user_storage_stats...")
        stats = get_user_storage_stats(user_id=tg_id)
        print(f"‚úÖ get_user_storage_stats —É—Å–ø–µ—à–Ω–æ: {stats}")
        
        return True

def check_database_state():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    with SessionLocal() as db:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = db.execute(select(User)).scalars().all()
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users_count)}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        generations_count = db.execute(select(GenerationHistory)).scalars().all()
        print(f"üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ: {len(generations_count)}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if generations_count:
            print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
            for gen in generations_count[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                print(f"  - ID: {gen.id}, User ID: {gen.user_id}, Type: {gen.generation_type}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è user_storage.py")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        check_database_state()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        success = test_user_id_conversion()
        
        if success:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å Foreign Key Violation –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
            
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
